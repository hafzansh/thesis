{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { NoInfer, TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IfDefined<T, N> = 0 extends 1 & T ? N : T extends {} ? T : N\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  ColumnDefTemplate,\n  RowData,\n  ColumnMeta,\n} from '../types'\nimport { memo, UnionToIntersection } from '../utils'\nimport { CoreCell } from './cell'\nimport { CoreHeader } from './headers'\n\nexport type CoreColumnDefType = 'data' | 'display' | 'group'\n\ntype CoreColumnDefBase<TData extends RowData, TValue> = {\n  columns?: ColumnDef<TData>[]\n  header?: ColumnDefTemplate<\n    ReturnType<CoreHeader<TData, TValue>['getContext']>\n  >\n  footer?: ColumnDefTemplate<\n    ReturnType<CoreHeader<TData, TValue>['getContext']>\n  >\n  cell?: ColumnDefTemplate<ReturnType<CoreCell<TData, TValue>['getContext']>>\n  meta?: ColumnMeta\n}\n\ntype CoreColumnDefDisplay<TData extends RowData, TValue> = CoreColumnDefBase<\n  TData,\n  TValue\n> & {\n  id: string\n}\n\ntype CoreColumnDefDisplayWithStringHeader<\n  TData extends RowData,\n  TValue\n> = CoreColumnDefBase<TData, TValue> & {\n  header: string\n  id?: string\n}\n\ntype CoreColumnDefAccessorFn<\n  TData extends RowData,\n  TValue = unknown\n> = CoreColumnDefBase<TData, TValue> & {\n  accessorFn: AccessorFn<TData, TValue>\n  id: string\n  // accessorKey?: never\n}\n\ntype CoreColumnDefAccessorKey<\n  TData extends RowData,\n  TValue\n> = CoreColumnDefBase<TData, TValue> & {\n  accessorKey: keyof TData\n  id?: string\n  // accessorFn?: never\n}\n\nexport type CoreColumnDef<TData extends RowData, TValue> =\n  | CoreColumnDefDisplay<TData, TValue>\n  | CoreColumnDefDisplayWithStringHeader<TData, TValue>\n  | CoreColumnDefAccessorFn<TData>\n  | CoreColumnDefAccessorKey<TData, TValue>\n\nexport type CoreColumnDefResolved<\n  TData extends RowData,\n  TValue = unknown\n> = Partial<UnionToIntersection<CoreColumnDef<TData, TValue>>>\n\nexport type CoreColumn<TData extends RowData, TValue> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData>,\n  depth: number,\n  parent?: Column<TData, TValue>\n) {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as CoreColumnDefResolved<TData>\n\n  let id =\n    resolvedColumnDef.id ??\n    resolvedColumnDef.accessorKey ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (resolvedColumnDef.accessorKey) {\n    accessorFn = (originalRow: TData) =>\n      (originalRow as any)[resolvedColumnDef.accessorKey]\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport type CoreHeader<TData extends RowData, TValue> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => {\n    table: Table<TData>\n    header: Header<TData, TValue>\n    column: Column<TData, TValue>\n  }\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, unknown>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport {\n  RowData,\n  Column,\n  Header,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Updater,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]!.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  Updater,\n  RowData,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TData extends RowData> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TData extends RowData> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          (\n            (table.options.enableExpanding ?? true) &&\n            !!row.subRows?.length\n          )\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue<string>(columnId)?.toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue<string>(columnId)?.includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TData extends RowData> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport type FilterFn<TData extends RowData> = {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | FilterFn<TData>\n\nexport type FiltersColumnDef<TData extends RowData> = {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TData extends RowData> = {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TData extends RowData> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\nexport type FiltersOptions<TData extends RowData> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\nexport type FiltersInstance<TData extends RowData> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : (filterFns[\n              column.columnDef.filterFn as BuiltInFilterFn\n            ] as FilterFn<TData>)\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : (filterFns[globalFilterFn as BuiltInFilterFn] as FilterFn<TData>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      _getFilteredRowModel:\n        table.options.getFilteredRowModel &&\n        table.options.getFilteredRowModel(table),\n      getFilteredRowModel: () => {\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  TableGenerics,\n  RowData,\n} from '../types'\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport type GroupingColumnDef<TData extends RowData, TValue> = {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TData extends RowData> = {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions = {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TData extends RowData> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : (aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ] as AggregationFn<TData>)\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport {\n  Table,\n  OnChangeFn,\n  Updater,\n  Column,\n  TableGenerics,\n  RowData,\n} from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TData extends RowData> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  RowModel,\n  Updater,\n  RowData,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions = {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TData extends RowData> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  TableGenerics,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TData extends RowData> = {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type ColumnPinningInstance<TData extends RowData> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  RowModel,\n  Updater,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TData extends RowData> = {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TData extends RowData> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows = table.getPreFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        return (\n          !table.getIsAllRowsSelected() &&\n          !!Object.keys(table.getState().rowSelection ?? {}).length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  Updater,\n  RowData,\n} from '../types'\n\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TData extends RowData> = {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport type SortingColumnDef<TData extends RowData> = {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TData extends RowData> = {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TData extends RowData> = {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\nexport type SortingInstance<TData extends RowData> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : (sortingFns[\n              column.columnDef.sortingFn as BuiltInSortingFn\n            ] as SortingFn<TData>)\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TData extends RowData> = {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TData extends RowData> = {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  ColumnDefTemplate,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TData extends RowData> = {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData>[]\n  defaultColumn?: Partial<ColumnDef<TData>>\n  renderFallbackValue: any\n}\n\nexport type CoreInstance<TData extends RowData> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData>>\n  _getColumnDefs: () => ColumnDef<TData>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TData>>\n\n        return {\n          header: props => props.header.column.id,\n          footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\n\nexport type CoreCell<TData extends RowData, TValue> = {\n  id: string\n  getValue: <TTValue = TValue>() => TTValue\n  renderValue: <TTValue = TValue>() => TTValue | null\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => {\n    table: Table<TData>\n    column: Column<TData, TValue>\n    row: Row<TData>\n    cell: Cell<TData, TValue>\n    getValue: <TTValue = TValue>() => TTValue\n    renderValue: <TTValue = TValue>() => TTValue | null\n  }\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n) {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: () => ({\n      table,\n      column,\n      row,\n      cell: cell as Cell<TData, TValue>,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, TableGenerics, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TData extends RowData> = {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { TableGenerics, Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        const newRow = createRow(\n          table,\n          row.id,\n          row.original,\n          row.index,\n          row.depth\n        )\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, TableGenerics, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, TableGenerics, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]!.getValue<number>(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          // Do not expand if rows are not included in pagination\n          !paginateExpandedRows ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        return expandRows(rowModel, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(\n  rowModel: RowModel<TData>,\n  table: Table<TData>\n) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, TableGenerics, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().pagination, table.getPrePaginationRowModel()],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows(\n            {\n              rows,\n              flatRows,\n              rowsById,\n            },\n            table\n          )\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","id","accessorKey","header","undefined","accessorFn","originalRow","process","env","NODE_ENV","Error","column","columns","getFlatColumns","flatMap","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","includes","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","center","columnsToGroup","headerFamily","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","getLeftTotalSize","getCenterTotalSize","getRightTotalSize","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","split","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","updateFn","setGlobalFilter","resetGlobalFilter","resetColumnFilters","_getFilteredRowModel","getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","resetGrouping","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","pinningState","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","getSortIndex","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","footer","renderValue","_getColumnDefs","columnDefs","recurseColumns","_getAllFlatColumnsById","flatColumns","acc","warn","getRenderValue","renderFallbackValue","original","rowIndex","_valuesCache","hasOwnProperty","getLeafRows","data","accessRows","originalRows","getSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","pass","resolvedColumnFilters","resolvedGlobalFilters","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}