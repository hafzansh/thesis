function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
        const dirty = [];
        const length = $$scope.ctx.length / 32;
        for (let i = 0; i < length; i++) {
            dirty[i] = -1;
        }
        return dirty;
    }
    return -1;
}
function null_to_empty(value) {
    return value == null ? '' : value;
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && root.host) {
        return root;
    }
    return node.ownerDocument;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_style(node, key, value, important) {
    if (value === null) {
        node.style.removeProperty(key);
    }
    else {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
class HtmlTag {
    constructor() {
        this.e = this.n = null;
    }
    c(html) {
        this.h(html);
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            this.e = element(target.nodeName);
            this.t = target;
            this.c(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(this.t, this.n[i], anchor);
        }
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
// flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.
const seen_callbacks = new Set();
let flushidx = 0; // Do *not* move this inside the flush() function
function flush() {
    const saved_component = current_component;
    do {
        // first, call beforeUpdate functions
        // and update components
        while (flushidx < dirty_components.length) {
            const component = dirty_components[flushidx];
            flushidx++;
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        flushidx = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src\components\SearchInputHTML.svelte generated by Svelte v3.46.4 */

function add_css$7(target) {
	append_styles(target, "svelte-1mpljnc", "input.css.svelte-1mpljnc{border:1px solid #e0e0e0;border-radius:4px;outline:none;padding:0 8px;line-height:24px;margin:0;height:24px;background:transparent;width:176px;transition:all, 0.1s;margin-left:16px}input.css.svelte-1mpljnc:focus{border:2px solid #e0e0e0}input.css.svelte-1mpljnc::placeholder{color:#9e9e9e;line-height:24px}");
}

function create_fragment$a(ctx) {
	let input;
	let input_class_value;
	let input_placeholder_value;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "class", input_class_value = "" + (null_to_empty(/*classList*/ ctx[1]) + " svelte-1mpljnc"));
			attr(input, "type", "text");
			attr(input, "placeholder", input_placeholder_value = /*$options*/ ctx[2].labels.search);
			attr(input, "ref", /*ref*/ ctx[0]);
			toggle_class(input, "css", /*$options*/ ctx[2].css);
		},
		m(target, anchor) {
			insert(target, input, anchor);

			if (!mounted) {
				dispose = listen(input, "input", /*input_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*classList*/ 2 && input_class_value !== (input_class_value = "" + (null_to_empty(/*classList*/ ctx[1]) + " svelte-1mpljnc"))) {
				attr(input, "class", input_class_value);
			}

			if (dirty & /*$options*/ 4 && input_placeholder_value !== (input_placeholder_value = /*$options*/ ctx[2].labels.search)) {
				attr(input, "placeholder", input_placeholder_value);
			}

			if (dirty & /*ref*/ 1) {
				attr(input, "ref", /*ref*/ ctx[0]);
			}

			if (dirty & /*classList, $options*/ 6) {
				toggle_class(input, "css", /*$options*/ ctx[2].css);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

function instance$a($$self, $$props, $$invalidate) {
	let $options;
	let { context } = $$props;
	let { ref = '' } = $$props;
	let { classList = '' } = $$props;
	const options = context.getOptions();
	component_subscribe($$self, options, value => $$invalidate(2, $options = value));

	const search = value => {
		context.getPageNumber().set(1);
		context.getGlobalFilter().set(value);
		context.getColumns().redraw();
	};

	const input_handler = e => search(e.target.value);

	$$self.$$set = $$props => {
		if ('context' in $$props) $$invalidate(5, context = $$props.context);
		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
		if ('classList' in $$props) $$invalidate(1, classList = $$props.classList);
	};

	return [ref, classList, $options, options, search, context, input_handler];
}

class SearchInputHTML extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$a, create_fragment$a, safe_not_equal, { context: 5, ref: 0, classList: 1 }, add_css$7);
	}
}

const subscriber_queue = [];
/**
 * Creates a `Readable` store that allows reading by subscription.
 * @param value initial value
 * @param {StartStopNotifier}start start and stop notifications for subscriptions
 */
function readable(value, start) {
    return {
        subscribe: writable(value, start).subscribe
    };
}
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = new Set();
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (const subscriber of subscribers) {
                    subscriber[1]();
                    subscriber_queue.push(subscriber, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.add(subscriber);
        if (subscribers.size === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}
function derived(stores, fn, initial_value) {
    const single = !Array.isArray(stores);
    const stores_array = single
        ? [stores]
        : stores;
    const auto = fn.length < 2;
    return readable(initial_value, (set) => {
        let inited = false;
        const values = [];
        let pending = 0;
        let cleanup = noop;
        const sync = () => {
            if (pending) {
                return;
            }
            cleanup();
            const result = fn(single ? values[0] : values, set);
            if (auto) {
                set(result);
            }
            else {
                cleanup = is_function(result) ? result : noop;
            }
        };
        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
            values[i] = value;
            pending &= ~(1 << i);
            if (inited) {
                sync();
            }
        }, () => {
            pending |= (1 << i);
        }));
        inited = true;
        sync();
        return function stop() {
            run_all(unsubscribers);
            cleanup();
        };
    });
}

const createContext = () => {
    const { subscribe, set, update } = writable({});
    return {
        subscribe, set, update,
        index: () => {
            let $context;
            context.subscribe(store => $context = store);
            return $context
        },
        add: (stores) => {
            const id = stores.getId().get();
            const newContext = { [id]: stores  };
            context.set({ ...context.index(),  ...newContext });
            return newContext[id]
        },
        get: (id) => {
            return context.index()[id] 
        }
    }
};

const context = createContext();

/* src\SearchInput.svelte generated by Svelte v3.46.4 */

function create_if_block$8(ctx) {
	let searchinputhtml;
	let current;

	searchinputhtml = new SearchInputHTML({
			props: {
				context: /*context*/ ctx[2],
				ref: /*ref*/ ctx[0],
				classList: /*classList*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(searchinputhtml.$$.fragment);
		},
		m(target, anchor) {
			mount_component(searchinputhtml, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const searchinputhtml_changes = {};
			if (dirty & /*context*/ 4) searchinputhtml_changes.context = /*context*/ ctx[2];
			if (dirty & /*ref*/ 1) searchinputhtml_changes.ref = /*ref*/ ctx[0];
			if (dirty & /*classList*/ 2) searchinputhtml_changes.classList = /*classList*/ ctx[1];
			searchinputhtml.$set(searchinputhtml_changes);
		},
		i(local) {
			if (current) return;
			transition_in(searchinputhtml.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(searchinputhtml.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(searchinputhtml, detaching);
		}
	};
}

function create_fragment$9(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*context*/ ctx[2] && create_if_block$8(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*context*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*context*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$8(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$9($$self, $$props, $$invalidate) {
	let { ref = '' } = $$props;
	let { classList = '' } = $$props;
	let { id = 'svelte-simple-datatable' } = $$props;
	let context$1 = null;
	let loop = 0;

	const interval = setInterval(
		() => {
			loop++;

			if (context.get(id)) {
				$$invalidate(2, context$1 = context.get(id));
				clearInterval(interval);
			} else if (loop === 20) {
				clearInterval(interval);
			}
		},
		50
	);

	$$self.$$set = $$props => {
		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
		if ('classList' in $$props) $$invalidate(1, classList = $$props.classList);
		if ('id' in $$props) $$invalidate(3, id = $$props.id);
	};

	return [ref, classList, context$1, id];
}

class SearchInput extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$9, create_fragment$9, safe_not_equal, { ref: 0, classList: 1, id: 3 });
	}
}

/* src\components\Search.svelte generated by Svelte v3.46.4 */

function add_css$6(target) {
	append_styles(target, "svelte-16n96wa", "section.svelte-16n96wa{height:32px}.css.svelte-16n96wa{margin-left:16px}");
}

function create_fragment$8(ctx) {
	let section;
	let searchinput;
	let current;
	searchinput = new SearchInput({ props: { id: /*id*/ ctx[0] } });

	return {
		c() {
			section = element("section");
			create_component(searchinput.$$.fragment);
			attr(section, "class", "dt-search svelte-16n96wa");
			toggle_class(section, "css", /*$options*/ ctx[2].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			mount_component(searchinput, section, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const searchinput_changes = {};
			if (dirty & /*id*/ 1) searchinput_changes.id = /*id*/ ctx[0];
			searchinput.$set(searchinput_changes);

			if (dirty & /*$options*/ 4) {
				toggle_class(section, "css", /*$options*/ ctx[2].css);
			}
		},
		i(local) {
			if (current) return;
			transition_in(searchinput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(searchinput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			destroy_component(searchinput);
		}
	};
}

function instance$8($$self, $$props, $$invalidate) {
	let $options,
		$$unsubscribe_options = noop,
		$$subscribe_options = () => ($$unsubscribe_options(), $$unsubscribe_options = subscribe(options, $$value => $$invalidate(2, $options = $$value)), options);

	$$self.$$.on_destroy.push(() => $$unsubscribe_options());
	let { id } = $$props;
	let { options } = $$props;
	$$subscribe_options();

	$$self.$$set = $$props => {
		if ('id' in $$props) $$invalidate(0, id = $$props.id);
		if ('options' in $$props) $$subscribe_options($$invalidate(1, options = $$props.options));
	};

	return [id, options, $options];
}

class Search extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$8, create_fragment$8, safe_not_equal, { id: 0, options: 1 }, add_css$6);
	}
}

/* src\components\PaginationRowCountHTML.svelte generated by Svelte v3.46.4 */

function add_css$5(target) {
	append_styles(target, "svelte-bzwyk1", ".css.svelte-bzwyk1{color:#616161;line-height:32px;margin-left:16px;font-size:14px}");
}

// (28:1) {:else}
function create_else_block_1(ctx) {
	let html_tag;
	let raw_value = `<b>${/*start*/ ctx[4]}</b>-<b>${/*end*/ ctx[3]}</b>/<b>${/*rows*/ ctx[2]}</b>` + "";
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTag();
			html_anchor = empty();
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*start, end, rows*/ 28 && raw_value !== (raw_value = `<b>${/*start*/ ctx[4]}</b>-<b>${/*end*/ ctx[3]}</b>/<b>${/*rows*/ ctx[2]}</b>` + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (22:1) {#if $datatableWidth > 600}
function create_if_block$7(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*rows*/ ctx[2] > 0) return create_if_block_1$4;
		return create_else_block$3;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (25:2) {:else}
function create_else_block$3(ctx) {
	let html_tag;
	let raw_value = /*$options*/ ctx[5].labels.noRows + "";
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTag();
			html_anchor = empty();
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$options*/ 32 && raw_value !== (raw_value = /*$options*/ ctx[5].labels.noRows + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (23:2) {#if rows > 0}
function create_if_block_1$4(ctx) {
	let html_tag;
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTag();
			html_anchor = empty();
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(/*info*/ ctx[6], target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*info*/ 64) html_tag.p(/*info*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

function create_fragment$7(ctx) {
	let aside;
	let aside_class_value;

	function select_block_type(ctx, dirty) {
		if (/*$datatableWidth*/ ctx[7] > 600) return create_if_block$7;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			aside = element("aside");
			if_block.c();
			attr(aside, "class", aside_class_value = "dt-pagination-rowcount " + /*classList*/ ctx[1] + " svelte-bzwyk1");
			attr(aside, "ref", /*ref*/ ctx[0]);
			toggle_class(aside, "css", /*$options*/ ctx[5].css);
		},
		m(target, anchor) {
			insert(target, aside, anchor);
			if_block.m(aside, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(aside, null);
				}
			}

			if (dirty & /*classList*/ 2 && aside_class_value !== (aside_class_value = "dt-pagination-rowcount " + /*classList*/ ctx[1] + " svelte-bzwyk1")) {
				attr(aside, "class", aside_class_value);
			}

			if (dirty & /*ref*/ 1) {
				attr(aside, "ref", /*ref*/ ctx[0]);
			}

			if (dirty & /*classList, $options*/ 34) {
				toggle_class(aside, "css", /*$options*/ ctx[5].css);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(aside);
			if_block.d();
		}
	};
}

function instance$7($$self, $$props, $$invalidate) {
	let start;
	let end;
	let rows;
	let info;
	let $options;
	let $rowsCount;
	let $pageNumber;
	let $datatableWidth;
	let { context } = $$props;
	let { ref = '' } = $$props;
	let { classList = '' } = $$props;
	const rowsCount = context.getRowsCount();
	component_subscribe($$self, rowsCount, value => $$invalidate(13, $rowsCount = value));
	const options = context.getOptions();
	component_subscribe($$self, options, value => $$invalidate(5, $options = value));
	const pageNumber = context.getPageNumber();
	component_subscribe($$self, pageNumber, value => $$invalidate(14, $pageNumber = value));
	const datatableWidth = context.getDatatableWidth();
	component_subscribe($$self, datatableWidth, value => $$invalidate(7, $datatableWidth = value));

	$$self.$$set = $$props => {
		if ('context' in $$props) $$invalidate(12, context = $$props.context);
		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
		if ('classList' in $$props) $$invalidate(1, classList = $$props.classList);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$pageNumber, $options*/ 16416) {
			$$invalidate(4, start = $pageNumber * $options.rowsPerPage - $options.rowsPerPage + 1);
		}

		if ($$self.$$.dirty & /*$pageNumber, $options, $rowsCount*/ 24608) {
			$$invalidate(3, end = Math.min($pageNumber * $options.rowsPerPage, $rowsCount));
		}

		if ($$self.$$.dirty & /*$rowsCount*/ 8192) {
			$$invalidate(2, rows = $rowsCount);
		}

		if ($$self.$$.dirty & /*$options, start, end, rows*/ 60) {
			$$invalidate(6, info = $options.labels.info.replace('{start}', `<b>${start}</b>`).replace('{end}', `<b>${end}</b>`).replace('{rows}', `<b>${rows}</b>`));
		}
	};

	return [
		ref,
		classList,
		rows,
		end,
		start,
		$options,
		info,
		$datatableWidth,
		rowsCount,
		options,
		pageNumber,
		datatableWidth,
		context,
		$rowsCount,
		$pageNumber
	];
}

class PaginationRowCountHTML extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$7, create_fragment$7, safe_not_equal, { context: 12, ref: 0, classList: 1 }, add_css$5);
	}
}

/* src\PaginationRowCount.svelte generated by Svelte v3.46.4 */

function create_if_block$6(ctx) {
	let paginationrowcounthtml;
	let current;

	paginationrowcounthtml = new PaginationRowCountHTML({
			props: {
				context: /*context*/ ctx[2],
				ref: /*ref*/ ctx[0],
				classList: /*classList*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(paginationrowcounthtml.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationrowcounthtml, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paginationrowcounthtml_changes = {};
			if (dirty & /*context*/ 4) paginationrowcounthtml_changes.context = /*context*/ ctx[2];
			if (dirty & /*ref*/ 1) paginationrowcounthtml_changes.ref = /*ref*/ ctx[0];
			if (dirty & /*classList*/ 2) paginationrowcounthtml_changes.classList = /*classList*/ ctx[1];
			paginationrowcounthtml.$set(paginationrowcounthtml_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationrowcounthtml.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationrowcounthtml.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationrowcounthtml, detaching);
		}
	};
}

function create_fragment$6(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*context*/ ctx[2] && create_if_block$6(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*context*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*context*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$6(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	let { ref = '' } = $$props;
	let { classList = '' } = $$props;
	let { id = 'svelte-simple-datatable' } = $$props;
	let context$1 = null;
	let loop = 0;

	const interval = setInterval(
		() => {
			loop++;

			if (context.get(id)) {
				$$invalidate(2, context$1 = context.get(id));
				clearInterval(interval);
			} else if (loop === 20) {
				clearInterval(interval);
			}
		},
		50
	);

	$$self.$$set = $$props => {
		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
		if ('classList' in $$props) $$invalidate(1, classList = $$props.classList);
		if ('id' in $$props) $$invalidate(3, id = $$props.id);
	};

	return [ref, classList, context$1, id];
}

class PaginationRowCount extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { ref: 0, classList: 1, id: 3 });
	}
}

/* src\components\PaginationButtonsHTML.svelte generated by Svelte v3.46.4 */

function add_css$4(target) {
	append_styles(target, "svelte-1nr9gki", "section.svelte-1nr9gki.svelte-1nr9gki{display:flex;flex-direction:row}.css.svelte-1nr9gki.svelte-1nr9gki{height:32px;margin-right:16px}.css.svelte-1nr9gki button.svelte-1nr9gki{background:inherit;height:32px;width:32px;color:#616161;font-size:13px;margin:0;padding:0;transition:all, 0.2s;line-height:32px;border:1px solid #e0e0e0;border-right:none;outline:none}.css.svelte-1nr9gki button.svelte-1nr9gki:first-child{border-radius:4px 0 0 4px}.css.svelte-1nr9gki button.svelte-1nr9gki:last-child{border-right:1px solid #e0e0e0;border-radius:0 4px 4px 0}.css.svelte-1nr9gki button.svelte-1nr9gki:not(.active):hover{background:#eee;cursor:pointer}.css.svelte-1nr9gki button.text.svelte-1nr9gki{width:auto;min-width:70px;cursor:pointer}.css.svelte-1nr9gki button.ellipse.svelte-1nr9gki:hover{background:inherit;cursor:default}.css.svelte-1nr9gki button.active.svelte-1nr9gki{background:#eee;font-weight:bold}.css.svelte-1nr9gki button.disabled.svelte-1nr9gki:hover{background:inherit;cursor:default}.css.mobile.svelte-1nr9gki button.disabled.svelte-1nr9gki{color:#bdbdbd}.css.mobile.svelte-1nr9gki button.svelte-1nr9gki{font-weight:bold}");
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	return child_ctx;
}

// (81:0) {:else}
function create_else_block$2(ctx) {
	let section;
	let button0;
	let t1;
	let button1;
	let t3;
	let button2;
	let t5;
	let button3;
	let section_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			section = element("section");
			button0 = element("button");
			button0.textContent = "❬❬";
			t1 = space();
			button1 = element("button");
			button1.textContent = "❮";
			t3 = space();
			button2 = element("button");
			button2.textContent = "❯";
			t5 = space();
			button3 = element("button");
			button3.textContent = "❭❭";
			attr(button0, "class", "svelte-1nr9gki");
			toggle_class(button0, "disabled", /*$pageNumber*/ ctx[3] === 1);
			attr(button1, "class", "svelte-1nr9gki");
			toggle_class(button1, "disabled", /*$pageNumber*/ ctx[3] === 1);
			attr(button2, "class", "svelte-1nr9gki");
			toggle_class(button2, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
			attr(button3, "class", "svelte-1nr9gki");
			toggle_class(button3, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
			attr(section, "class", section_class_value = "dt-pagination-buttons mobile " + /*classList*/ ctx[1] + " svelte-1nr9gki");
			toggle_class(section, "css", /*$options*/ ctx[4].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, button0);
			append(section, t1);
			append(section, button1);
			append(section, t3);
			append(section, button2);
			append(section, t5);
			append(section, button3);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler_5*/ ctx[19]),
					listen(button1, "click", /*click_handler_6*/ ctx[20]),
					listen(button2, "click", /*click_handler_7*/ ctx[21]),
					listen(button3, "click", /*click_handler_8*/ ctx[22])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$pageNumber*/ 8) {
				toggle_class(button0, "disabled", /*$pageNumber*/ ctx[3] === 1);
			}

			if (dirty & /*$pageNumber*/ 8) {
				toggle_class(button1, "disabled", /*$pageNumber*/ ctx[3] === 1);
			}

			if (dirty & /*$pageNumber, pageCount*/ 12) {
				toggle_class(button2, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
			}

			if (dirty & /*$pageNumber, pageCount*/ 12) {
				toggle_class(button3, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
			}

			if (dirty & /*classList*/ 2 && section_class_value !== (section_class_value = "dt-pagination-buttons mobile " + /*classList*/ ctx[1] + " svelte-1nr9gki")) {
				attr(section, "class", section_class_value);
			}

			if (dirty & /*classList, $options*/ 18) {
				toggle_class(section, "css", /*$options*/ ctx[4].css);
			}
		},
		d(detaching) {
			if (detaching) detach(section);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (29:0) {#if $datatableWidth > 600}
function create_if_block$5(ctx) {
	let section;
	let button0;
	let raw0_value = /*$options*/ ctx[4].labels.previous + "";
	let t0;
	let button1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let button2;
	let raw1_value = /*$options*/ ctx[4].labels.next + "";
	let section_class_value;
	let mounted;
	let dispose;
	let if_block0 = /*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[3] >= 5 && create_if_block_4();
	let each_value = /*buttons*/ ctx[5];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	let if_block1 = /*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[3] <= /*pageCount*/ ctx[2].length - 3 && create_if_block_2$2();
	let if_block2 = /*pageCount*/ ctx[2].length > 1 && create_if_block_1$3(ctx);

	return {
		c() {
			section = element("section");
			button0 = element("button");
			t0 = space();
			button1 = element("button");
			button1.textContent = "1";
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			if (if_block2) if_block2.c();
			t6 = space();
			button2 = element("button");
			attr(button0, "class", "text svelte-1nr9gki");
			toggle_class(button0, "disabled", /*$pageNumber*/ ctx[3] === 1);
			attr(button1, "class", "svelte-1nr9gki");
			toggle_class(button1, "active", /*$pageNumber*/ ctx[3] === 1);
			attr(button2, "class", "text svelte-1nr9gki");
			toggle_class(button2, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
			attr(section, "class", section_class_value = "dt-pagination-buttons " + /*classList*/ ctx[1] + " svelte-1nr9gki");
			attr(section, "ref", /*ref*/ ctx[0]);
			toggle_class(section, "css", /*$options*/ ctx[4].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, button0);
			button0.innerHTML = raw0_value;
			append(section, t0);
			append(section, button1);
			append(section, t2);
			if (if_block0) if_block0.m(section, null);
			append(section, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}

			append(section, t4);
			if (if_block1) if_block1.m(section, null);
			append(section, t5);
			if (if_block2) if_block2.m(section, null);
			append(section, t6);
			append(section, button2);
			button2.innerHTML = raw1_value;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[14]),
					listen(button1, "click", /*click_handler_1*/ ctx[15]),
					listen(button2, "click", /*click_handler_4*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$options*/ 16 && raw0_value !== (raw0_value = /*$options*/ ctx[4].labels.previous + "")) button0.innerHTML = raw0_value;
			if (dirty & /*$pageNumber*/ 8) {
				toggle_class(button0, "disabled", /*$pageNumber*/ ctx[3] === 1);
			}

			if (dirty & /*$pageNumber*/ 8) {
				toggle_class(button1, "active", /*$pageNumber*/ ctx[3] === 1);
			}

			if (/*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[3] >= 5) {
				if (if_block0) ; else {
					if_block0 = create_if_block_4();
					if_block0.c();
					if_block0.m(section, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*$pageNumber, buttons, setPage, pageCount*/ 2092) {
				each_value = /*buttons*/ ctx[5];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(section, t4);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[3] <= /*pageCount*/ ctx[2].length - 3) {
				if (if_block1) ; else {
					if_block1 = create_if_block_2$2();
					if_block1.c();
					if_block1.m(section, t5);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*pageCount*/ ctx[2].length > 1) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1$3(ctx);
					if_block2.c();
					if_block2.m(section, t6);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*$options*/ 16 && raw1_value !== (raw1_value = /*$options*/ ctx[4].labels.next + "")) button2.innerHTML = raw1_value;
			if (dirty & /*$pageNumber, pageCount*/ 12) {
				toggle_class(button2, "disabled", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
			}

			if (dirty & /*classList*/ 2 && section_class_value !== (section_class_value = "dt-pagination-buttons " + /*classList*/ ctx[1] + " svelte-1nr9gki")) {
				attr(section, "class", section_class_value);
			}

			if (dirty & /*ref*/ 1) {
				attr(section, "ref", /*ref*/ ctx[0]);
			}

			if (dirty & /*classList, $options*/ 18) {
				toggle_class(section, "css", /*$options*/ ctx[4].css);
			}
		},
		d(detaching) {
			if (detaching) detach(section);
			if (if_block0) if_block0.d();
			destroy_each(each_blocks, detaching);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (45:2) {#if pageCount.length > 6 && $pageNumber >= 5}
function create_if_block_4(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "...";
			attr(button, "class", "ellipse svelte-1nr9gki");
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (50:3) {#if n > 0 && n < pageCount.length - 1}
function create_if_block_3(ctx) {
	let button;
	let t_value = /*n*/ ctx[24] + 1 + "";
	let t;
	let mounted;
	let dispose;

	function click_handler_2() {
		return /*click_handler_2*/ ctx[16](/*n*/ ctx[24]);
	}

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "class", "svelte-1nr9gki");
			toggle_class(button, "active", /*$pageNumber*/ ctx[3] === /*n*/ ctx[24] + 1);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_2);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*buttons*/ 32 && t_value !== (t_value = /*n*/ ctx[24] + 1 + "")) set_data(t, t_value);

			if (dirty & /*$pageNumber, buttons*/ 40) {
				toggle_class(button, "active", /*$pageNumber*/ ctx[3] === /*n*/ ctx[24] + 1);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (49:2) {#each buttons as n}
function create_each_block$2(ctx) {
	let if_block_anchor;
	let if_block = /*n*/ ctx[24] > 0 && /*n*/ ctx[24] < /*pageCount*/ ctx[2].length - 1 && create_if_block_3(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*n*/ ctx[24] > 0 && /*n*/ ctx[24] < /*pageCount*/ ctx[2].length - 1) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (60:2) {#if pageCount.length > 6 && $pageNumber <= pageCount.length - 3}
function create_if_block_2$2(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "...";
			attr(button, "class", "ellipse svelte-1nr9gki");
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (64:2) {#if pageCount.length > 1}
function create_if_block_1$3(ctx) {
	let button;
	let t_value = /*pageCount*/ ctx[2].length + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "class", "svelte-1nr9gki");
			toggle_class(button, "active", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_3*/ ctx[17]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*pageCount*/ 4 && t_value !== (t_value = /*pageCount*/ ctx[2].length + "")) set_data(t, t_value);

			if (dirty & /*$pageNumber, pageCount*/ 12) {
				toggle_class(button, "active", /*$pageNumber*/ ctx[3] === /*pageCount*/ ctx[2].length);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$5(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*$datatableWidth*/ ctx[6] > 600) return create_if_block$5;
		return create_else_block$2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	let pageCount;
	let buttons;
	let $pageNumber;
	let $options;
	let $rowsCount;
	let $datatableWidth;
	let { context } = $$props;
	let { ref = '' } = $$props;
	let { classList = '' } = $$props;
	const rowsCount = context.getRowsCount();
	component_subscribe($$self, rowsCount, value => $$invalidate(13, $rowsCount = value));
	const options = context.getOptions();
	component_subscribe($$self, options, value => $$invalidate(4, $options = value));
	const pageNumber = context.getPageNumber();
	component_subscribe($$self, pageNumber, value => $$invalidate(3, $pageNumber = value));
	const datatableWidth = context.getDatatableWidth();
	component_subscribe($$self, datatableWidth, value => $$invalidate(6, $datatableWidth = value));

	const slice = (arr, page) => {
		if (page < 5) {
			return arr.slice(0, 5);
		} else if (page > arr.length - 4) {
			return arr.slice(arr.length - 5, arr.length);
		}

		return arr.slice(page - 2, page + 1);
	};

	const setPage = number => {
		pageNumber.set(number);
		context.getColumns().redraw();
	};

	const click_handler = () => setPage($pageNumber - 1);
	const click_handler_1 = () => setPage(1);
	const click_handler_2 = n => setPage(n + 1);
	const click_handler_3 = () => setPage(pageCount.length);
	const click_handler_4 = () => setPage($pageNumber + 1);
	const click_handler_5 = () => setPage(1);
	const click_handler_6 = () => setPage($pageNumber - 1);
	const click_handler_7 = () => setPage($pageNumber + 1);
	const click_handler_8 = () => setPage(pageCount.length);

	$$self.$$set = $$props => {
		if ('context' in $$props) $$invalidate(12, context = $$props.context);
		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
		if ('classList' in $$props) $$invalidate(1, classList = $$props.classList);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$rowsCount, $options*/ 8208) {
			$$invalidate(2, pageCount = Array.from(Array(Math.ceil($rowsCount / $options.rowsPerPage)).keys()));
		}

		if ($$self.$$.dirty & /*pageCount, $pageNumber*/ 12) {
			$$invalidate(5, buttons = slice(pageCount, $pageNumber));
		}
	};

	return [
		ref,
		classList,
		pageCount,
		$pageNumber,
		$options,
		buttons,
		$datatableWidth,
		rowsCount,
		options,
		pageNumber,
		datatableWidth,
		setPage,
		context,
		$rowsCount,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7,
		click_handler_8
	];
}

class PaginationButtonsHTML extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { context: 12, ref: 0, classList: 1 }, add_css$4);
	}
}

/* src\PaginationButtons.svelte generated by Svelte v3.46.4 */

function create_if_block$4(ctx) {
	let paginationbuttonshtml;
	let current;

	paginationbuttonshtml = new PaginationButtonsHTML({
			props: {
				context: /*context*/ ctx[2],
				ref: /*ref*/ ctx[0],
				classList: /*classList*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(paginationbuttonshtml.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationbuttonshtml, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paginationbuttonshtml_changes = {};
			if (dirty & /*context*/ 4) paginationbuttonshtml_changes.context = /*context*/ ctx[2];
			if (dirty & /*ref*/ 1) paginationbuttonshtml_changes.ref = /*ref*/ ctx[0];
			if (dirty & /*classList*/ 2) paginationbuttonshtml_changes.classList = /*classList*/ ctx[1];
			paginationbuttonshtml.$set(paginationbuttonshtml_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationbuttonshtml.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationbuttonshtml.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationbuttonshtml, detaching);
		}
	};
}

function create_fragment$4(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*context*/ ctx[2] && create_if_block$4(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*context*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*context*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let { ref = '' } = $$props;
	let { classList = '' } = $$props;
	let { id = 'svelte-simple-datatable' } = $$props;
	let context$1 = null;
	let loop = 0;

	const interval = setInterval(
		() => {
			loop++;

			if (context.get(id)) {
				$$invalidate(2, context$1 = context.get(id));
				clearInterval(interval);
			} else if (loop === 24) {
				clearInterval(interval);
			}
		},
		50
	);

	$$self.$$set = $$props => {
		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
		if ('classList' in $$props) $$invalidate(1, classList = $$props.classList);
		if ('id' in $$props) $$invalidate(3, id = $$props.id);
	};

	return [ref, classList, context$1, id];
}

class PaginationButtons extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { ref: 0, classList: 1, id: 3 });
	}
}

/* src\components\Pagination.svelte generated by Svelte v3.46.4 */

function add_css$3(target) {
	append_styles(target, "svelte-1thvc3t", "section.svelte-1thvc3t{display:flex;flex-direction:row;justify-content:space-between;height:40px;padding-top:8px;align-items:center}.css.svelte-1thvc3t{background:#fff}");
}

// (9:0) {#if $options.pagination && ($options.blocks.paginationRowCount || $options.blocks.paginationButtons)}
function create_if_block$3(ctx) {
	let section;
	let current_block_type_index;
	let if_block0;
	let t;
	let current;
	const if_block_creators = [create_if_block_2$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$options*/ ctx[2].blocks.paginationRowCount) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*$options*/ ctx[2].blocks.paginationButtons && create_if_block_1$2(ctx);

	return {
		c() {
			section = element("section");
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr(section, "class", "dt-pagination svelte-1thvc3t");
			toggle_class(section, "css", /*$options*/ ctx[2].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			if_blocks[current_block_type_index].m(section, null);
			append(section, t);
			if (if_block1) if_block1.m(section, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(section, t);
			}

			if (/*$options*/ ctx[2].blocks.paginationButtons) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$options*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1$2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(section, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty & /*$options*/ 4) {
				toggle_class(section, "css", /*$options*/ ctx[2].css);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
		}
	};
}

// (13:2) {:else}
function create_else_block$1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (11:2) {#if $options.blocks.paginationRowCount}
function create_if_block_2$1(ctx) {
	let paginationrowcount;
	let current;
	paginationrowcount = new PaginationRowCount({ props: { id: /*id*/ ctx[0] } });

	return {
		c() {
			create_component(paginationrowcount.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationrowcount, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paginationrowcount_changes = {};
			if (dirty & /*id*/ 1) paginationrowcount_changes.id = /*id*/ ctx[0];
			paginationrowcount.$set(paginationrowcount_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationrowcount.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationrowcount.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationrowcount, detaching);
		}
	};
}

// (16:2) {#if $options.blocks.paginationButtons}
function create_if_block_1$2(ctx) {
	let paginationbuttons;
	let current;
	paginationbuttons = new PaginationButtons({ props: { id: /*id*/ ctx[0] } });

	return {
		c() {
			create_component(paginationbuttons.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationbuttons, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paginationbuttons_changes = {};
			if (dirty & /*id*/ 1) paginationbuttons_changes.id = /*id*/ ctx[0];
			paginationbuttons.$set(paginationbuttons_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationbuttons.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationbuttons.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationbuttons, detaching);
		}
	};
}

function create_fragment$3(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$options*/ ctx[2].pagination && (/*$options*/ ctx[2].blocks.paginationRowCount || /*$options*/ ctx[2].blocks.paginationButtons) && create_if_block$3(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$options*/ ctx[2].pagination && (/*$options*/ ctx[2].blocks.paginationRowCount || /*$options*/ ctx[2].blocks.paginationButtons)) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$options*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let $options,
		$$unsubscribe_options = noop,
		$$subscribe_options = () => ($$unsubscribe_options(), $$unsubscribe_options = subscribe(options, $$value => $$invalidate(2, $options = $$value)), options);

	$$self.$$.on_destroy.push(() => $$unsubscribe_options());
	let { id } = $$props;
	let { options } = $$props;
	$$subscribe_options();

	$$self.$$set = $$props => {
		if ('id' in $$props) $$invalidate(0, id = $$props.id);
		if ('options' in $$props) $$subscribe_options($$invalidate(1, options = $$props.options));
	};

	return [id, options, $options];
}

class Pagination extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { id: 0, options: 1 }, add_css$3);
	}
}

const header = {
    removeOriginalThead: (id) => {
        setTimeout(() => {
            const thead = document.querySelector(`#${id} table thead`);
            const originHeight = thead.getBoundingClientRect().height;
            thead.parentNode.style.marginTop = '-' + (originHeight) + 'px';
            thead.style.visibility = 'hidden';
        }, 50);
    },
    getOrginalTHeadClassList: (id) => {
        return document.querySelector(`#${id} table thead`).classList
    },
};

/* src\components\StickyHeader.svelte generated by Svelte v3.46.4 */

function add_css$2(target) {
	append_styles(target, "svelte-1x5myu9", "section.svelte-1x5myu9.svelte-1x5myu9{position:-webkit-sticky;position:sticky;top:0;left:0;z-index:6;background:inherit}.css.svelte-1x5myu9 th.svelte-1x5myu9{padding:8px 0px 8px 16px;text-align:center;border-bottom:1px solid #eee;background:#fff}.css.svelte-1x5myu9 th.sortable.svelte-1x5myu9{cursor:pointer}.css.svelte-1x5myu9 th.sortable span.svelte-1x5myu9{padding-right:16px;position:relative}.css.svelte-1x5myu9 th.sortable span.svelte-1x5myu9:before,.css.svelte-1x5myu9 th.sortable span.svelte-1x5myu9:after{border:4px solid transparent;content:'';display:block;height:0;right:0;top:50%;position:absolute;width:0}.css.svelte-1x5myu9 th.sortable span.svelte-1x5myu9:before{border-bottom-color:#e0e0e0;margin-top:-9px}.css.svelte-1x5myu9 th.sortable span.svelte-1x5myu9:after{border-top-color:#e0e0e0;margin-top:1px}.css.svelte-1x5myu9 th.sortable.asc span.svelte-1x5myu9:before{border-bottom-color:#9e9e9e}.css.svelte-1x5myu9 th.sortable.desc span.svelte-1x5myu9:after{border-top-color:#9e9e9e}.css.svelte-1x5myu9 th.filter.svelte-1x5myu9{padding:0;margin:0;background-image:none;border:1px solid #fafafa}th.filter.svelte-1x5myu9 input.svelte-1x5myu9{margin:0;padding:0;width:100%}.css.svelte-1x5myu9 th.filter input.svelte-1x5myu9{background:#fff;height:24px;border:none;border-bottom:1px solid #eee;text-align:center;outline:none;border-radius:0;font-size:14px}.css.svelte-1x5myu9 th.filter input.svelte-1x5myu9::placeholder{color:#bdbdbd;font-style:italic;font-size:13px}");
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (24:3) {#each $columns as th}
function create_each_block_1(ctx) {
	let th;
	let html_tag;
	let raw_value = /*th*/ ctx[8].html + "";
	let span;
	let t;
	let th_class_value;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[6](/*th*/ ctx[8], ...args);
	}

	return {
		c() {
			th = element("th");
			html_tag = new HtmlTag();
			span = element("span");
			t = space();
			html_tag.a = span;
			attr(span, "class", "svelte-1x5myu9");
			attr(th, "nowrap", "");
			set_style(th, "min-width", /*th*/ ctx[8].minWidth + "px");
			attr(th, "class", th_class_value = "" + (null_to_empty(/*th*/ ctx[8].classList) + " svelte-1x5myu9"));
			toggle_class(th, "sortable", /*th*/ ctx[8].key && /*$options*/ ctx[3].sortable === true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			html_tag.m(raw_value, th);
			append(th, span);
			append(th, t);

			if (!mounted) {
				dispose = listen(th, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*$columns*/ 16 && raw_value !== (raw_value = /*th*/ ctx[8].html + "")) html_tag.p(raw_value);

			if (dirty & /*$columns*/ 16) {
				set_style(th, "min-width", /*th*/ ctx[8].minWidth + "px");
			}

			if (dirty & /*$columns*/ 16 && th_class_value !== (th_class_value = "" + (null_to_empty(/*th*/ ctx[8].classList) + " svelte-1x5myu9"))) {
				attr(th, "class", th_class_value);
			}

			if (dirty & /*$columns, $columns, $options*/ 24) {
				toggle_class(th, "sortable", /*th*/ ctx[8].key && /*$options*/ ctx[3].sortable === true);
			}
		},
		d(detaching) {
			if (detaching) detach(th);
			mounted = false;
			dispose();
		}
	};
}

// (36:2) {#if $options.columnFilter === true}
function create_if_block$2(ctx) {
	let tr;
	let each_value = /*$columns*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	return {
		c() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$columns, $options, columns*/ 26) {
				each_value = /*$columns*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (40:6) {#if th.key}
function create_if_block_1$1(ctx) {
	let input;
	let input_placeholder_value;
	let mounted;
	let dispose;

	function input_handler(...args) {
		return /*input_handler*/ ctx[7](/*th*/ ctx[8], ...args);
	}

	return {
		c() {
			input = element("input");
			attr(input, "type", "text");
			attr(input, "placeholder", input_placeholder_value = /*$options*/ ctx[3].labels.filter);
			attr(input, "class", "browser-default svelte-1x5myu9");
		},
		m(target, anchor) {
			insert(target, input, anchor);

			if (!mounted) {
				dispose = listen(input, "input", input_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$options*/ 8 && input_placeholder_value !== (input_placeholder_value = /*$options*/ ctx[3].labels.filter)) {
				attr(input, "placeholder", input_placeholder_value);
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (38:4) {#each $columns as th}
function create_each_block$1(ctx) {
	let th;
	let t;
	let if_block = /*th*/ ctx[8].key && create_if_block_1$1(ctx);

	return {
		c() {
			th = element("th");
			if (if_block) if_block.c();
			t = space();
			attr(th, "class", "filter svelte-1x5myu9");
			set_style(th, "width", /*th*/ ctx[8].width);
			set_style(th, "height", "25px");
		},
		m(target, anchor) {
			insert(target, th, anchor);
			if (if_block) if_block.m(th, null);
			append(th, t);
		},
		p(ctx, dirty) {
			if (/*th*/ ctx[8].key) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					if_block.m(th, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*$columns*/ 16) {
				set_style(th, "width", /*th*/ ctx[8].width);
			}
		},
		d(detaching) {
			if (detaching) detach(th);
			if (if_block) if_block.d();
		}
	};
}

function create_fragment$2(ctx) {
	let section;
	let thead;
	let tr;
	let t;
	let thead_class_value;
	let each_value_1 = /*$columns*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let if_block = /*$options*/ ctx[3].columnFilter === true && create_if_block$2(ctx);

	return {
		c() {
			section = element("section");
			thead = element("thead");
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			attr(thead, "class", thead_class_value = "" + (null_to_empty(/*theadClassList*/ ctx[2]) + " svelte-1x5myu9"));
			attr(section, "class", "dt-header svelte-1x5myu9");
			toggle_class(section, "sortable", /*$options*/ ctx[3].sortable === true);
			toggle_class(section, "css", /*$options*/ ctx[3].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, thead);
			append(thead, tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append(thead, t);
			if (if_block) if_block.m(thead, null);
		},
		p(ctx, [dirty]) {
			if (dirty & /*$columns, $options, columns*/ 26) {
				each_value_1 = /*$columns*/ ctx[4];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (/*$options*/ ctx[3].columnFilter === true) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					if_block.m(thead, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*theadClassList*/ 4 && thead_class_value !== (thead_class_value = "" + (null_to_empty(/*theadClassList*/ ctx[2]) + " svelte-1x5myu9"))) {
				attr(thead, "class", thead_class_value);
			}

			if (dirty & /*$options*/ 8) {
				toggle_class(section, "sortable", /*$options*/ ctx[3].sortable === true);
			}

			if (dirty & /*$options*/ 8) {
				toggle_class(section, "css", /*$options*/ ctx[3].css);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let $options,
		$$unsubscribe_options = noop,
		$$subscribe_options = () => ($$unsubscribe_options(), $$unsubscribe_options = subscribe(options, $$value => $$invalidate(3, $options = $$value)), options);

	let $columns,
		$$unsubscribe_columns = noop,
		$$subscribe_columns = () => ($$unsubscribe_columns(), $$unsubscribe_columns = subscribe(columns, $$value => $$invalidate(4, $columns = $$value)), columns);

	$$self.$$.on_destroy.push(() => $$unsubscribe_options());
	$$self.$$.on_destroy.push(() => $$unsubscribe_columns());
	let { id = 'svelte-simple-datatable' } = $$props;
	let { options } = $$props;
	$$subscribe_options();
	let { columns } = $$props;
	$$subscribe_columns();
	let theadClassList;

	onMount(() => {
		columns.draw();
		header.removeOriginalThead(id);
		$$invalidate(2, theadClassList = header.getOrginalTHeadClassList(id));
	});

	const click_handler = (th, e) => columns.sort(e.target, th.key);
	const input_handler = (th, e) => columns.filter(th.key, e.target.value);

	$$self.$$set = $$props => {
		if ('id' in $$props) $$invalidate(5, id = $$props.id);
		if ('options' in $$props) $$subscribe_options($$invalidate(0, options = $$props.options));
		if ('columns' in $$props) $$subscribe_columns($$invalidate(1, columns = $$props.columns));
	};

	return [
		options,
		columns,
		theadClassList,
		$options,
		$columns,
		id,
		click_handler,
		input_handler
	];
}

class StickyHeader extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { id: 5, options: 0, columns: 1 }, add_css$2);
	}
}

class options
{
    create()
    {
        const {subscribe, set } = writable({
            sortable: true,
            pagination: true,
            rowsPerPage: 50,
            columnFilter: false,
            scrollY: true,
            css: true,
            labels: {
                search: 'Search...',
                filter: 'Filter',
                noRows: 'No entries to found',
                info: 'Showing {start} to {end} of {rows} entries',
                previous: 'Previous',
                next: 'Next',
            },
            blocks: {
                searchInput: true, 
                paginationButtons: true,
                paginationRowCount: true,
            }
        });
        return {
            subscribe, set, 
            get: (self) => {
                let $store;
                self.subscribe(store => $store = store);
                return $store
            },
            parse: (opt) => {
                opt.labels = opt.labels ?? {};
                const labels = {
                    search:   typeof opt.labels.search   === 'string' ? opt.labels.search   : 'Search...',
                    filter:   typeof opt.labels.filter   === 'string' ? opt.labels.filter   : 'Filter',
                    noRows:   typeof opt.labels.noRows   === 'string' ? opt.labels.noRows   : 'No entries to found',
                    info:     typeof opt.labels.info     === 'string' ? opt.labels.info     : 'Showing {start} to {end} of {rows} entries',
                    previous: typeof opt.labels.previous === 'string' ? opt.labels.previous : 'Previous',
                    next:     typeof opt.labels.next     === 'string' ? opt.labels.next     : 'Next',                
                };   
                opt.blocks = opt.blocks ?? {};
                const blocks = {
                    searchInput:        typeof opt.blocks.searchInput        === 'boolean' ? opt.blocks.searchInput        : true, 
                    paginationButtons:  typeof opt.blocks.paginationButtons  === 'boolean' ? opt.blocks.paginationButtons  : true,
                    paginationRowCount: typeof opt.blocks.paginationRowCount === 'boolean' ? opt.blocks.paginationRowCount : true,
                };
                return {
                    sortable:     typeof opt.sortable       === 'boolean' ? opt.sortable      : true,
                    pagination:   typeof opt.pagination     === 'boolean' ? opt.pagination    : true,
                    rowsPerPage:  typeof opt.rowsPerPage    === 'number'  ? opt.rowsPerPage   : 50,
                    columnFilter: typeof opt.columnFilter   === 'boolean' ? opt.columnFilter  : false, 
                    scrollY:      typeof opt.scrollY        === 'boolean' ? opt.scrollY       : true, 
                    css:          typeof opt.css            === 'boolean' ? opt.css           : true, 
                    labels: labels,
                    blocks: blocks
                }
            }
        }
    }
}

class States
{
    create(options, identifier = null) 
    {
        const id = this.createId(identifier);
        const rowsCount = this.createRowsCount();
        return {
            rowsCount: rowsCount,
            id: id,
            pageNumber: this.createPageNumber(id, options, rowsCount),
            datatableWidth: this.createDatatableWidth()

        }
    }

    createPageNumber(id, options, rowsCount)
    {
        const { subscribe, update } = writable(1);
        return {
            subscribe, update,
            set: (number) => update( store => {
                let $rowsPerPage, $rowsCount;
                rowsCount.subscribe(store => $rowsCount = store);
                options.subscribe(store => $rowsPerPage = store.rowsPerPage);
    
                if ( number >= 1 && number <= Math.ceil($rowsCount / $rowsPerPage) ) {
                    store = parseInt(number);
                }
                document.querySelector(`#${id.get()} .dt-table`).scrollTop = 0;
                return store
            })
        }
    }

    createId(identifier = null)
    {
        const id = identifier ?? 'ssd-' + (Math.random() + 1).toString(36).substring(5);
		const { subscribe } = readable(id);
		return {
			subscribe,
			get: () => { return id }
		}
    }

    createRowsCount()
    {
        return writable(0)
    }

    createDatatableWidth()
    {
        return writable(null)
    }
}

class Filters 
{
    create() 
    {
        return {
            globalFilter: this.createGlobalFilter(),
            localFilters: this.createLocalFilters()
        }
    }
    
    createLocalFilters() 
    {
        const { subscribe, update } = writable([]);
        return {
            subscribe, update,
            add: (key, value) => update(store => {
                const filter = {key: key, value: value}; 
                store = store.filter(item => { return item.key !== key && item.value.length > 0 });
                store.push(filter);
                return store
            }),
            remove: () => update(store => [])
        }
    }

    createGlobalFilter()
    {
        const { subscribe, update } = writable(null);
        return {
            subscribe, 
            set: (value) => update(store => {
                store = (value.length > 0) ? value : null;
                return store
            }),
            remove: () => update(store => null)
        }
    }
}

class Data 
{
    create(states, filters, options)
    {
        const data = this.createData();
        const filtered = this.createFiltered(data, states.rowsCount, filters.globalFilter, filters.localFilters);
        const rows = this.createRows(filtered, options, states.pageNumber);
        return {
            data: data,
            filtered: filtered,
            rows: rows
        }
    }

    createData()
    {
        const { subscribe, set, update } = writable([]);
        return {
            subscribe, set,
            sortAsc: (key) => update(store => {
                try {
                    store.sort( (a, b) => {
                        if ( typeof( key(b) ) === "boolean" ) {
                            return key(a) ? 1 : -1
                        } else {
                            return key(b).localeCompare(key(a)) 
                        }									
                    });
    
                    return store
                } catch (e) {
                    return store.sort( (a, b) => parseFloat(key(b)) - parseFloat(key(a)))
                }
                //return store.sort( (a, b) => key(b).localeCompare(key(a)) )
                
            }),
            sortDesc: (key) => update(store => {
                try {
                    store.sort( (a, b) => {
                        if ( typeof(key(b) ) === "boolean" ) {
                            return key(a) ? -1 : 1
                        } else {
                            return key(a).localeCompare(key(b)) 
                        }									
                    });
    
                    return store					
                } catch (e) {
                    return store.sort( (a, b) => parseFloat(key(a)) - parseFloat(key(b)))
                }
                //return store.sort( (a, b) => key(a).localeCompare(key(b)) )
            }),
        }
    }

    createFiltered(data, rowsCount, globalFilter, localFilters) 
    {
        return derived(
            [data, globalFilter, localFilters],
            ([$data, $globalFilter, $localFilters]) => {
                if ($globalFilter) {
                    $data = $data.filter( item => {
                        return Object.keys(item).some( k => {
                            return item[k].toString().toLowerCase().indexOf($globalFilter.toString().toLowerCase()) > -1
                        })
                    });
                }
                if ($localFilters.length > 0) {
                    $localFilters.forEach(filter => {
                        return $data = $data.filter( item => filter.key(item).toString().toLowerCase().indexOf(filter.value.toString().toLowerCase()) > -1)
                    });
                }
                rowsCount.set($data.length);
                return $data
            } 	
        )
    }

    createRows(filtered, options, pageNumber)
    {
        return derived(
            [filtered, options, pageNumber],
            ([$filtered, $options, $pageNumber]) => {
                if (!$options.pagination) {
                    return $filtered
                }
                return $filtered.slice( ($pageNumber - 1) * $options.rowsPerPage, $pageNumber * $options.rowsPerPage) 
            }
        ) 
    }
}

class Columns 
{
    create(data, states, filters, options)
    {
		const id = states.id;
		this.id = id.get();
		const pageNumber = states.pageNumber;
		const localFilters = filters.localFilters;
        const { subscribe, set, update } = writable([]);
		return {
			subscribe, set, update,
			get: (self) => {
				let $columns;
				self.subscribe(store => $columns = store);
				return $columns
			},
			sort: (element, key) => {
				if (options.get(options).sortable !== true || typeof key === 'undefined') {
					return
				}
				if (
					element.classList.contains('sortable') &&
					element.classList.contains('asc')
				) {
					Array.from(element.parentNode.children).forEach((item) =>
						item.classList.remove('asc', 'desc')
					);
					element.classList.add('desc');
					data.sortDesc(key);
					pageNumber.set(1);
				} else {
					Array.from(element.parentNode.children).forEach((item) =>
						item.classList.remove('desc', 'asc')
					);
					element.classList.add('asc');
					data.sortAsc(key);
					pageNumber.set(1);
				}
				this.get(this.id).redraw();
			},
			filter: (key, value) => {
				pageNumber.set(1);
				localFilters.add(key, value);
				this.get(this.id).redraw();
			},
			draw: () => {
				setTimeout(() => {
					const tbody = document.querySelector(`#${id.get()} table tbody tr`);
					if (tbody === null) return
					const thead = document.querySelectorAll(`#${id.get()} .dt-header thead tr`);
					const $columns = this.getData(this.id);

					thead[0].children[0];
					Array.from(tbody.children)[0];

					thead.forEach(tr => {
						let i = 0;
						Array.from(tbody.children).forEach(td => {
							let th = tr.children[i];
							let thW = th.getBoundingClientRect().width;
							let tdW = td.getBoundingClientRect().width;
							if (tdW > thW) { 
								th.style.minWidth = tdW + 'px';
								th.style.maxWidth = tdW + 'px';
								$columns[i].minWidth = tdW;
							}
							else {
								td.style.minWidth = thW + 'px';
								td.style.maxWidth = thW + 'px';
								$columns[i].minWidth = thW;
							} 
							i++;
						});
					});
				}, 50);	
			},
			redraw: () => {
				if ( options.get(options).scrollY === false ) return
				
				setTimeout(() => {
					const tbody = document.querySelector(`#${id.get()} table tbody tr`);
					if (tbody === null) return
					const thead = document.querySelectorAll(`#${id.get()} .dt-header thead tr`);
					const $columns = this.getData(this.id);
					thead.forEach(tr => {
						let i = 0;
						Array.from(tbody.children).forEach(td => {
							let th = tr.children[i];
							let thW = th.getBoundingClientRect().width;
							let tdW = td.getBoundingClientRect().width;
							if (tdW > thW) { 
								th.style.minWidth = tdW + 'px';
								th.style.maxWidth = tdW + 'px';
								$columns[i].minWidth = tdW;
							}
							else {
								td.style.minWidth = thW + 'px';
								td.style.maxWidth = thW + 'px';
								$columns[i].minWidth = thW;
							} 
							i++;
						});
					});
				}, 50);			
			},
		}
    }

	get(id)
	{
		return context.get(id).getColumns()
	}

	getData(id) 
	{
		const columns =  context.get(id).getColumns();
		return context.get(id).getColumns().get(columns)
	}
}

class Datatable
{
    constructor(identifier) 
    {
        this.id = identifier;
    }

    create() 
    {
        this.options   = new options().create();
        this.states    = new States().create(this.options, this.id);
        this.filters   = new Filters().create();
        this.data      = new Data().create(this.states, this.filters, this.options);
        this.columns   = new Columns().create(this.data.data, this.states, this.filters, this.options);
        context.add(this);
    }

    get(id)
    {
        return context.get(id)
    }

    getOptions       () { return this?.options                }
    getPageNumber    () { return this?.states.pageNumber      }
    getId            () { return this?.states.id              }
    getRowsCount     () { return this?.states.rowsCount       }
    getDatatableWidth() { return this?.states.datatableWidth  }
    getGlobalFilter  () { return this?.filters.globalFilter   }
    getLocalFilters  () { return this?.filters.localFilters   }
    getData          () { return this?.data.data              }
    getFiltered      () { return this?.data.filtered          }
    getRows          () { return this?.data.rows              }
    getColumns       () { return this?.columns                }

}

class Component 
{
    constructor( id = 'svelte-simple-datatable' )
    {
        this.context = context.get(id);
        this.id = id;
    }
    init() 
    {
        this.setColumns();
        this.resize();
        this.addEventScrollX();
        new ResizeObserver((mutations) => {
            this.resize();
        }).observe(document.querySelector(`#${this.id}`).parentElement);
    }

    reset () 
    {
        this.context.getPageNumber().update(store => 1);
        this.context.getGlobalFilter().remove();
        this.context.getLocalFilters().remove();
        this.context.getColumns().set([]);
    }

    setRows(data)
    {
        for ( const item of data ) {

            for ( const key of Object.keys(item) ) {
                if (item[key] === null) {
                    item[key] = '';
                }
            }

        }
        this.context.getData().set(data);
        return
    }

    getSize()
    {
        const parent = document.querySelector(`#${this.id}`).parentNode;
        const style = getComputedStyle(parent);
        const rect = parent.getBoundingClientRect();
        const getNumber = (pxValue) => { return parseFloat(pxValue.replace('px', ''))  }; 
        return {
            parentWidth: rect.width,
            parentHeight: rect.height,
            width: (rect.width - getNumber(style.paddingLeft) - getNumber(style.paddingRight) - getNumber(style.borderLeftWidth) - getNumber(style.borderRightWidth)) / rect.width,
            height: (rect.height - getNumber(style.paddingTop) - getNumber(style.paddingBottom) - getNumber(style.borderTopWidth) - getNumber(style.borderBottomWidth)) / rect.height,
            top: style.paddingTop,
            right: style.paddingRight,
            bottom: style.paddingBottom,
            left: style.paddingLeft
        }
    }

    resize()
    {
        if ( !document.querySelector(`#${this.id}`) ) return
        const size = this.getSize();
        const tableContainer = document.querySelector(`#${this.id} .dt-table`);
        if ( this.getOptions().scrollY ) {
            tableContainer.style.height = this.setTableContainerHeight(size.parentHeight * size.height) + 'px';
            this.context.getColumns().redraw();
        }
        this.context.getDatatableWidth().set( size.parentWidth * size.width );
        if (size.parentWidth * size.width < document.querySelector(`#${this.id} table`).offsetWidth) {
            tableContainer.style.overflowX = 'auto';
        }
    }

    setTableContainerHeight(height) 
    {
        let paginationBlock;
        if (this.getOptions().pagination && (this.getOptions().blocks.paginationButtons || this.getOptions().blocks.paginationRowCount)) {
            paginationBlock = true;
        }
        const calc = [
            (this.getOptions().blocks.searchInput) ? document.querySelector(`#${this.id} .dt-search`).getBoundingClientRect().height : 0,
            (paginationBlock) ? document.querySelector(`#${this.id} .dt-pagination`).getBoundingClientRect().height : 0
        ];
        const sum = (a, b) => a + b;
        document.querySelector(`#${this.id} .dt-table`).style.height = height - calc.reduce(sum) + 'px';
    }

    addEventScrollX()
    {
        if ( this.getOptions().scrollY ) {
            document.querySelector(`#${this.id} .dt-table`).addEventListener('scroll', (e) => {
                document.querySelector(`#${this.id} .dt-header`).style.left = (-1 * e.target.scrollLeft) + 'px';
            });
        }
    }

    setColumns() {
        setTimeout( () => {
            const columnList = [];
            let i = 0;
            document.querySelectorAll(`#${this.id} table thead th`).forEach(th => {
                columnList.push({
                    index: i,
                    html: th.innerHTML,
                    key: this.getKey(th.dataset.key),
                    sort: null,
                    classList: th.classList,
                    minWidth: th.getBoundingClientRect().width
                });
                th.addEventListener('click', (e) => {
                    this.context.getColumns().sort(e.target, this.getKey(th.dataset.key));
                }, true);
                i++;
            });
            this.context.getColumns().set(columnList);
        }, 25);
    }

    getKey(key) 
    {
        if (!key)  return 
        if (key && key.indexOf('=>') > 0) {
            return new Function(`'use strict';return (${key})`)()
        }
        return (x) => x[key]
    }

    getOptions() 
    {
        return this.context.getOptions().get(this.context.getOptions())
    }
}

/* src\Datatable.svelte generated by Svelte v3.46.4 */

function add_css$1(target) {
	append_styles(target, "svelte-z0nhq", ".datatable.svelte-z0nhq.svelte-z0nhq{position:relative}.css.datatable.svelte-z0nhq.svelte-z0nhq{background:#fff}.datatable.scroll-y.svelte-z0nhq.svelte-z0nhq{height:160px}.datatable.svelte-z0nhq .svelte-z0nhq{box-sizing:border-box}article.svelte-z0nhq.svelte-z0nhq{position:relative;overflow-y:auto;overflow-x:hidden;width:100%;background:inherit}.css.svelte-z0nhq article.svelte-z0nhq{border-bottom:1px solid #e0e0e0;scrollbar-width:thin}.css.svelte-z0nhq article.svelte-z0nhq::-webkit-scrollbar{width:6px;height:6px}.css.svelte-z0nhq article.svelte-z0nhq::-webkit-scrollbar-track{background:#f5f5f5}.css.svelte-z0nhq article.svelte-z0nhq::-webkit-scrollbar-thumb{background:#c2c2c2}.css.svelte-z0nhq article.svelte-z0nhq::-webkit-scrollbar-thumb:hover{background:#9e9e9e}.css.svelte-z0nhq article.svelte-z0nhq::-webkit-scrollbar-track-piece:start{top:40px}.css.svelte-z0nhq table.svelte-z0nhq{width:100%;border-collapse:collapse;overflow:hidden;margin-bottom:6px}");
}

const get_default_slot_changes = dirty => ({});
const get_default_slot_context = ctx => ({ rows: /*datatable*/ ctx[3].getRows() });

// (40:1) {#if $options.blocks.searchInput === true}
function create_if_block_2(ctx) {
	let search;
	let current;

	search = new Search({
			props: {
				options: /*options*/ ctx[4],
				id: /*id*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(search.$$.fragment);
		},
		m(target, anchor) {
			mount_component(search, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const search_changes = {};
			if (dirty & /*id*/ 2) search_changes.id = /*id*/ ctx[1];
			search.$set(search_changes);
		},
		i(local) {
			if (current) return;
			transition_in(search.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(search.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(search, detaching);
		}
	};
}

// (44:2) {#if $options.scrollY}
function create_if_block_1(ctx) {
	let stickyheader;
	let current;

	stickyheader = new StickyHeader({
			props: {
				id: /*id*/ ctx[1],
				options: /*options*/ ctx[4],
				columns: /*datatable*/ ctx[3].getColumns()
			}
		});

	return {
		c() {
			create_component(stickyheader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(stickyheader, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const stickyheader_changes = {};
			if (dirty & /*id*/ 2) stickyheader_changes.id = /*id*/ ctx[1];
			stickyheader.$set(stickyheader_changes);
		},
		i(local) {
			if (current) return;
			transition_in(stickyheader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(stickyheader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(stickyheader, detaching);
		}
	};
}

// (51:1) {#if $options.blocks.paginationRowCount === true || $options.blocks.paginationButtons === true}
function create_if_block$1(ctx) {
	let pagination;
	let current;

	pagination = new Pagination({
			props: {
				options: /*options*/ ctx[4],
				id: /*id*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(pagination.$$.fragment);
		},
		m(target, anchor) {
			mount_component(pagination, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const pagination_changes = {};
			if (dirty & /*id*/ 2) pagination_changes.id = /*id*/ ctx[1];
			pagination.$set(pagination_changes);
		},
		i(local) {
			if (current) return;
			transition_in(pagination.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(pagination.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(pagination, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let section;
	let t0;
	let article;
	let t1;
	let table;
	let t2;
	let section_class_value;
	let current;
	let if_block0 = /*$options*/ ctx[2].blocks.searchInput === true && create_if_block_2(ctx);
	let if_block1 = /*$options*/ ctx[2].scrollY && create_if_block_1(ctx);
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context);
	let if_block2 = (/*$options*/ ctx[2].blocks.paginationRowCount === true || /*$options*/ ctx[2].blocks.paginationButtons === true) && create_if_block$1(ctx);

	return {
		c() {
			section = element("section");
			if (if_block0) if_block0.c();
			t0 = space();
			article = element("article");
			if (if_block1) if_block1.c();
			t1 = space();
			table = element("table");
			if (default_slot) default_slot.c();
			t2 = space();
			if (if_block2) if_block2.c();
			attr(table, "class", "svelte-z0nhq");
			attr(article, "class", "dt-table svelte-z0nhq");
			attr(section, "id", /*id*/ ctx[1]);
			attr(section, "class", section_class_value = "datatable " + /*classList*/ ctx[0] + " svelte-z0nhq");
			toggle_class(section, "scroll-y", /*$options*/ ctx[2].scrollY);
			toggle_class(section, "css", /*$options*/ ctx[2].css);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			if (if_block0) if_block0.m(section, null);
			append(section, t0);
			append(section, article);
			if (if_block1) if_block1.m(article, null);
			append(article, t1);
			append(article, table);

			if (default_slot) {
				default_slot.m(table, null);
			}

			append(section, t2);
			if (if_block2) if_block2.m(section, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$options*/ ctx[2].blocks.searchInput === true) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*$options*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(section, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*$options*/ ctx[2].scrollY) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$options*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(article, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes),
						get_default_slot_context
					);
				}
			}

			if (/*$options*/ ctx[2].blocks.paginationRowCount === true || /*$options*/ ctx[2].blocks.paginationButtons === true) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*$options*/ 4) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(section, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*id*/ 2) {
				attr(section, "id", /*id*/ ctx[1]);
			}

			if (!current || dirty & /*classList*/ 1 && section_class_value !== (section_class_value = "datatable " + /*classList*/ ctx[0] + " svelte-z0nhq")) {
				attr(section, "class", section_class_value);
			}

			if (dirty & /*classList, $options*/ 5) {
				toggle_class(section, "scroll-y", /*$options*/ ctx[2].scrollY);
			}

			if (dirty & /*classList, $options*/ 5) {
				toggle_class(section, "css", /*$options*/ ctx[2].css);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block2) if_block2.d();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let $options;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { data = [] } = $$props;
	let { settings = {} } = $$props;
	let { classList = '' } = $$props;
	let { id = 'svelte-simple-datatable' } = $$props;

	//Initialize context for all stores.
	const datatable = new Datatable(id);

	datatable.create();
	const options = datatable.getOptions();
	component_subscribe($$self, options, value => $$invalidate(2, $options = value));
	const component = new Component(id);
	const rows = datatable.getRows();
	const dataRows = rows;
	onMount(() => component.init());
	onDestroy(() => component.reset());

	$$self.$$set = $$props => {
		if ('data' in $$props) $$invalidate(5, data = $$props.data);
		if ('settings' in $$props) $$invalidate(6, settings = $$props.settings);
		if ('classList' in $$props) $$invalidate(0, classList = $$props.classList);
		if ('id' in $$props) $$invalidate(1, id = $$props.id);
		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*data, settings*/ 96) {
			{
				component.setRows(data);
				options.set(options.parse(settings));
			}
		}
	};

	return [
		classList,
		id,
		$options,
		datatable,
		options,
		data,
		settings,
		dataRows,
		$$scope,
		slots
	];
}

class Datatable_1 extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				data: 5,
				settings: 6,
				classList: 0,
				id: 1,
				dataRows: 7
			},
			add_css$1
		);
	}

	get dataRows() {
		return this.$$.ctx[7];
	}
}

/* src\ColumnFilterInputs.svelte generated by Svelte v3.46.4 */

function add_css(target) {
	append_styles(target, "svelte-a9sdic", ".css.svelte-a9sdic.svelte-a9sdic{padding:0;margin:0;background-image:none;border:1px solid #fafafa}th.filter.svelte-a9sdic input.svelte-a9sdic{margin:0;padding:0;width:100%}.css.svelte-a9sdic input.svelte-a9sdic{background:#fff;height:24px;border:none;border-bottom:1px solid #eee;text-align:center;outline:none;border-radius:0;font-size:14px}.css.svelte-a9sdic input.svelte-a9sdic::placeholder{color:#bdbdbd;font-style:italic;font-size:13px}");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (21:4) {:else}
function create_else_block(ctx) {
	let th;

	return {
		c() {
			th = element("th");
			attr(th, "class", "filter");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (12:4) {#if column.key}
function create_if_block(ctx) {
	let th;
	let input;
	let input_placeholder_value;
	let t;
	let mounted;
	let dispose;

	function input_handler(...args) {
		return /*input_handler*/ ctx[5](/*column*/ ctx[7], ...args);
	}

	return {
		c() {
			th = element("th");
			input = element("input");
			t = space();
			attr(input, "type", "text");
			attr(input, "placeholder", input_placeholder_value = /*$options*/ ctx[1].labels.filter);
			attr(input, "class", "browser-default svelte-a9sdic");
			attr(th, "class", "filter svelte-a9sdic");
			toggle_class(th, "css", /*$options*/ ctx[1].css);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, input);
			append(th, t);

			if (!mounted) {
				dispose = listen(input, "input", input_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$options*/ 2 && input_placeholder_value !== (input_placeholder_value = /*$options*/ ctx[1].labels.filter)) {
				attr(input, "placeholder", input_placeholder_value);
			}

			if (dirty & /*$options*/ 2) {
				toggle_class(th, "css", /*$options*/ ctx[1].css);
			}
		},
		d(detaching) {
			if (detaching) detach(th);
			mounted = false;
			dispose();
		}
	};
}

// (11:0) {#each $columns as column}
function create_each_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*column*/ ctx[7].key) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let tr;
	let each_value = /*$columns*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$options, columns, $columns*/ 7) {
				each_value = /*$columns*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(tr);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $columns;
	let $options;
	let { id = 'svelte-simple-datatable' } = $$props;
	const context$1 = context.get(id);
	const columns = context$1.getColumns();
	component_subscribe($$self, columns, value => $$invalidate(0, $columns = value));
	const options = context$1.getOptions();
	component_subscribe($$self, options, value => $$invalidate(1, $options = value));
	const input_handler = (column, e) => columns.filter(column.key, e.target.value);

	$$self.$$set = $$props => {
		if ('id' in $$props) $$invalidate(4, id = $$props.id);
	};

	return [$columns, $options, columns, options, id, input_handler];
}

class ColumnFilterInputs extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { id: 4 }, add_css);
	}
}

export { ColumnFilterInputs, Datatable_1 as Datatable, PaginationButtons, PaginationRowCount, SearchInput };
