var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  default: () => betterWorker,
  isBuild: () => isBuild,
  pluginHelper: () => import_vite_plugin_bundle8.default,
  setPluginContext: () => import_vite_plugin_bundle8.setPluginContext
});

// node_modules/tsup/assets/cjs_shims.js
var importMetaUrlShim = typeof document === "undefined" ? new (require("url")).URL("file:" + __filename).href : document.currentScript && document.currentScript.src || new URL("main.js", document.baseURI).href;

// src/worklets/audio.ts
var import_vite_plugin_bundle = __toModule(require("vite-plugin-bundle"));
var AUDIO_WORKLET_SCHEMA = "audioworklet:";
var AUDIO_WORKLET_HELPER = "audioworklet@helper";
var AUDIO_WORKLET_HELPER_CODE = `
  export default (url) => {
    return (ctx) => {
      if('audioWorklet' in ctx) {
        ctx.audioWorklet.addModule(url)
      }
    }
  }
`;
function audio(inline_worklet_audio) {
  return {
    name: "worker:audioworklet",
    async resolveId(id, importer) {
      if (id === AUDIO_WORKLET_HELPER)
        return;
      if (!id.startsWith(AUDIO_WORKLET_SCHEMA))
        return;
      const realID = await this.resolve(id.slice(AUDIO_WORKLET_SCHEMA.length), importer);
      if (!realID)
        throw new Error(`Audio Worklet file ${id} not found!`);
      return AUDIO_WORKLET_SCHEMA + realID.id;
    },
    load(id) {
      if (id === AUDIO_WORKLET_HELPER)
        return AUDIO_WORKLET_HELPER_CODE;
      if (!id.startsWith(AUDIO_WORKLET_SCHEMA))
        return;
      const url = (0, import_vite_plugin_bundle.bundle)(this, id.slice(AUDIO_WORKLET_SCHEMA.length), "worklet@audio", "iife", inline_worklet_audio, !isBuild);
      return `
        import AUDIO_HELPER from '${AUDIO_WORKLET_HELPER}'

        export default AUDIO_HELPER(${url})
      `;
    }
  };
}

// src/worklets/paint.ts
var import_vite_plugin_bundle2 = __toModule(require("vite-plugin-bundle"));
var PAINT_WORKLET_SCHEMA = "paintworklet:";
var PAINT_WORKLET_HELPER = "paintworklet@helper";
var PAINT_WORKLET_HELPER_CODE = `
  export default (url) => {
    if('paintWorklet' in CSS) {
      CSS.paintWorklet.addModule(url)
    }
  }
`;
function paint(inline_worklet_paint) {
  return {
    name: "worker:paintworklet",
    async resolveId(id, importer) {
      if (id === PAINT_WORKLET_HELPER)
        return;
      if (!id.startsWith(PAINT_WORKLET_SCHEMA))
        return;
      const realID = await this.resolve(id.slice(PAINT_WORKLET_SCHEMA.length), importer);
      if (!realID)
        throw new Error(`Paint Worklet file ${id} not found!`);
      return PAINT_WORKLET_SCHEMA + realID.id;
    },
    load(id) {
      if (id === PAINT_WORKLET_HELPER)
        return PAINT_WORKLET_HELPER_CODE;
      if (!id.startsWith(PAINT_WORKLET_SCHEMA))
        return;
      const url = (0, import_vite_plugin_bundle2.bundle)(this, id.slice(PAINT_WORKLET_SCHEMA.length), "worklet@paint", "iife", inline_worklet_paint, !isBuild);
      return `
        import PAINT_HELPER from '${PAINT_WORKLET_HELPER}'

        PAINT_HELPER(${url})
      `;
    }
  };
}

// src/worklets/layout.ts
var import_vite_plugin_bundle3 = __toModule(require("vite-plugin-bundle"));
var LAYOUT_WORKLET_SCHEMA = "layoutworklet:";
var LAYOUT_WORKLET_HELPER = "layoutworklet@helper";
var LAYOUT_WORKLET_HELPER_CODE = `
  export default (url) => {
    if('layoutWorklet' in CSS) {
      CSS.layoutWorklet.addModule(url)
    }
  }
`;
function layout(inline_worklet_layout) {
  return {
    name: "worker:layoutworklet",
    async resolveId(id, importer) {
      if (id === LAYOUT_WORKLET_HELPER)
        return;
      if (!id.startsWith(LAYOUT_WORKLET_SCHEMA))
        return;
      const realID = await this.resolve(id.slice(LAYOUT_WORKLET_SCHEMA.length), importer);
      if (!realID)
        throw new Error(`Layout Worklet file ${id} not found!`);
      return LAYOUT_WORKLET_SCHEMA + realID.id;
    },
    load(id) {
      if (id === LAYOUT_WORKLET_HELPER)
        return LAYOUT_WORKLET_HELPER_CODE;
      if (!id.startsWith(LAYOUT_WORKLET_SCHEMA))
        return;
      const url = (0, import_vite_plugin_bundle3.bundle)(this, id.slice(LAYOUT_WORKLET_SCHEMA.length), "worklet@layout", "iife", inline_worklet_layout, !isBuild);
      return `
        import LAYOUT_HELPER from '${LAYOUT_WORKLET_HELPER}'

        LAYOUT_HELPER(${url})
      `;
    }
  };
}

// src/worklets/animation.ts
var import_vite_plugin_bundle4 = __toModule(require("vite-plugin-bundle"));
var ANIMATION_WORKLET_SCHEMA = "animationworklet:";
var ANIMATION_WORKLET_HELPER = "animationworklet@helper";
var ANIMATION_WORKLET_HELPER_CODE = `
  export default (url) => {
    if('animationWorklet' in CSS) {
      CSS.animationWorklet.addModule(url)
    }
  }
`;
function animation(inline_worklet_animation) {
  return {
    name: "worker:animationworklet",
    async resolveId(id, importer) {
      if (id === ANIMATION_WORKLET_HELPER)
        return;
      if (!id.startsWith(ANIMATION_WORKLET_SCHEMA))
        return;
      const realID = await this.resolve(id.slice(ANIMATION_WORKLET_SCHEMA.length), importer);
      if (!realID)
        throw new Error(`Paint Worklet file ${id} not found!`);
      return ANIMATION_WORKLET_SCHEMA + realID.id;
    },
    load(id) {
      if (id === ANIMATION_WORKLET_HELPER)
        return ANIMATION_WORKLET_HELPER_CODE;
      if (!id.startsWith(ANIMATION_WORKLET_SCHEMA))
        return;
      const url = (0, import_vite_plugin_bundle4.bundle)(this, id.slice(ANIMATION_WORKLET_SCHEMA.length), "worklet@animation", "iife", inline_worklet_animation, !isBuild);
      return `
        import ANIMATION_HELPER from '${ANIMATION_WORKLET_HELPER}'

        ANIMATION_HELPER(${url})
      `;
    }
  };
}

// src/worker/serviceWorker.ts
var import_vite_plugin_bundle5 = __toModule(require("vite-plugin-bundle"));
var SERVICE_WORKER_SCHEMA = "serviceworker:";
function serviceWorker(filename) {
  return {
    name: "worker:serviceworker",
    async resolveId(id, importer) {
      if (!id.startsWith(SERVICE_WORKER_SCHEMA))
        return;
      if (!importer)
        return id;
      const realID = await this.resolve(id.slice(SERVICE_WORKER_SCHEMA.length), importer);
      if (!realID)
        throw new Error(`Service Worker file ${id} not found!`);
      return SERVICE_WORKER_SCHEMA + realID.id;
    },
    load(id) {
      if (!id.startsWith(SERVICE_WORKER_SCHEMA))
        return;
      const url = (0, import_vite_plugin_bundle5.bundle)(this, id.slice(SERVICE_WORKER_SCHEMA.length), "worker@service", "iife", false, !isBuild, filename);
      return `
        export default (opt = {}) => {
          if('serviceWorker' in navigator) {
            return navigator.serviceWorker.register(${url}, opt)
          }
        }
      `;
    }
  };
}

// src/worker/worker.ts
var import_vite_plugin_bundle6 = __toModule(require("vite-plugin-bundle"));
var validSettings = [
  "iife",
  "module",
  "inline",
  "single"
];
var WORKER_SCHEMA = "worker";
function worker() {
  return {
    name: "worker:worker",
    async resolveId(id, importer) {
      const [p1, ...rest] = id.split(":");
      if (!p1.startsWith(WORKER_SCHEMA))
        return;
      if (!importer)
        return id;
      const realID = await this.resolve(rest.join(":"), importer);
      if (!realID)
        throw new Error(`Worker file ${id} not found!`);
      return p1 + ":" + realID.id;
    },
    async load(id) {
      const [p1, ...rest] = id.split(":");
      if (!p1.startsWith(WORKER_SCHEMA))
        return;
      const settings = p1.split("-").slice(1);
      if (settings.some((val) => !validSettings.includes(val)))
        return;
      if (settings.includes("iife") && settings.includes("module"))
        throw new Error('You can not have both "module" and "iife" settings in a Worker File!');
      const realID = rest.join(":");
      const buildType = isBuild ? settings.includes("module") ? "module" : "iife" : settings.includes("iife") ? "iife" : "module";
      const file = await (0, import_vite_plugin_bundle6.bundle)(this, realID, "worker", buildType, isBuild && settings.includes("inline"), !isBuild);
      if (!settings.includes("single")) {
        return `
          export default function workerWrapper() {
            return new Worker(${file}, ${JSON.stringify({
          type: buildType === "iife" ? "classic" : "module"
        })})
          }
        `;
      } else {
        return `
          let myWorker = new Worker(${file}, ${JSON.stringify({
          type: buildType === "iife" ? "classic" : "module"
        })})
          export default myWorker
        `;
      }
    }
  };
}

// src/worker/sharedWorker.ts
var import_vite_plugin_bundle7 = __toModule(require("vite-plugin-bundle"));
var validSettings2 = ["iife", "module", "inline", "single"];
var WORKER_SCHEMA2 = "sharedWorker";
function sharedWorker() {
  return {
    name: "worker:sharedWorker",
    async resolveId(id, importer) {
      const [p1, ...rest] = id.split(":");
      if (!p1.startsWith(WORKER_SCHEMA2))
        return;
      if (!importer)
        return id;
      const realID = await this.resolve(rest.join(":"), importer);
      if (!realID)
        throw new Error(`SharedWorker file ${id} not found!`);
      return p1 + ":" + realID.id;
    },
    async load(id) {
      const [p1, ...rest] = id.split(":");
      if (!p1.startsWith(WORKER_SCHEMA2))
        return;
      const settings = p1.split("-").slice(1);
      if (settings.some((val) => !validSettings2.includes(val)))
        return;
      if (settings.includes("iife") && settings.includes("module"))
        throw new Error('You can not have both "module" and "iife" settings in a Worker File!');
      const realID = rest.join(":");
      const buildType = isBuild ? settings.includes("module") ? "module" : "iife" : settings.includes("iife") ? "iife" : "module";
      const file = await (0, import_vite_plugin_bundle7.bundle)(this, realID, "worker", buildType, isBuild && settings.includes("inline"), !isBuild);
      if (!settings.includes("single")) {
        return `
          export default function workerWrapper() {
            return new SharedWorker(${file}, ${JSON.stringify({
          type: buildType === "iife" ? "classic" : "module"
        })})
          }
        `;
      } else {
        return `
          let myWorker = = new SharedWorker(${file}, ${JSON.stringify({
          type: buildType === "iife" ? "classic" : "module"
        })})
          export default myWorker
        `;
      }
    }
  };
}

// src/index.ts
var import_vite_plugin_bundle8 = __toModule(require("vite-plugin-bundle"));
var isBuild;
function betterWorker({
  inline_worklet_paint = false,
  inline_worklet_audio = false,
  inline_worklet_layout = false,
  inline_worklet_animation = false,
  service_worker_file = "sw.js"
}) {
  return [
    {
      name: "worker:base",
      configResolved(config) {
        isBuild = config.command === "build";
      }
    },
    paint(inline_worklet_paint),
    audio(inline_worklet_audio),
    layout(inline_worklet_layout),
    animation(inline_worklet_animation),
    serviceWorker(service_worker_file),
    worker(),
    sharedWorker()
  ];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  isBuild,
  pluginHelper,
  setPluginContext
});
