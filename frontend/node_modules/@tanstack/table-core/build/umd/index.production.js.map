{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/row.ts","../../src/core/cell.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getExpandedRowModel.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getPaginationRowModel.ts","../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { NoInfer, TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index100 = ComputeRange<100>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index100\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  ColumnDefTemplate,\n  RowData,\n  ColumnMeta,\n} from '../types'\nimport { DeepKeys, IsKnown, memo, UnionToIntersection } from '../utils'\nimport { CellContext } from './cell'\nimport { HeaderContext } from './headers'\n\nexport type CoreColumnDefBase<TData extends RowData, TValue> = {\n  columns?: ColumnDef<TData, unknown>[]\n  header?: ColumnDefTemplate<HeaderContext<TData, TValue>>\n  footer?: ColumnDefTemplate<HeaderContext<TData, TValue>>\n  cell?: ColumnDefTemplate<CellContext<TData, TValue>>\n  meta?: ColumnMeta<TData, TValue>\n}\n\nexport type CoreColumnDefDisplay<\n  TData extends RowData,\n  TValue\n> = CoreColumnDefBase<TData, TValue> & {\n  id: string\n}\n\nexport type CoreColumnDefDisplayWithStringHeader<\n  TData extends RowData,\n  TValue\n> = CoreColumnDefBase<TData, TValue> & {\n  header: string\n  id?: string\n}\n\nexport type CoreColumnDefAccessorFn<\n  TData extends RowData,\n  TValue\n> = CoreColumnDefBase<TData, TValue> & {\n  accessorFn: AccessorFn<TData, TValue>\n  id: string\n}\n\nexport type CoreColumnDefAccessorKey<\n  TData extends RowData,\n  TValue\n> = CoreColumnDefBase<TData, TValue> & {\n  accessorKey: DeepKeys<TData>\n  id?: string\n}\n\nexport type CoreColumnDef<TData extends RowData, TValue> =\n  | CoreColumnDefDisplay<TData, TValue>\n  | CoreColumnDefDisplayWithStringHeader<TData, TValue>\n  | CoreColumnDefAccessorFn<TData, TValue>\n  | CoreColumnDefAccessorKey<TData, TValue>\n\nexport type CoreColumnDefResolved<\n  TData extends RowData,\n  TValue = unknown\n> = Partial<UnionToIntersection<CoreColumnDef<TData, TValue>>> & {\n  accessorKey?: string\n}\n\nexport type CoreColumn<TData extends RowData, TValue> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n) {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as CoreColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key]\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport type HeaderContext<TData, TValue> = {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport type CoreHeader<TData extends RowData, TValue> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport {\n  RowData,\n  Column,\n  Header,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Updater,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]!.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  Updater,\n  RowData,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TData extends RowData> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TData extends RowData> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          (\n            (table.options.enableExpanding ?? true) &&\n            !!row.subRows?.length\n          )\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue<string>(columnId)?.toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue<string>(columnId)?.includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TData extends RowData> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport type FilterFn<TData extends RowData> = {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | FilterFn<TData>\n\nexport type FiltersColumnDef<TData extends RowData> = {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TData extends RowData> = {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TData extends RowData> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\nexport type FiltersOptions<TData extends RowData> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\nexport type FiltersInstance<TData extends RowData> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : (filterFns[\n              column.columnDef.filterFn as BuiltInFilterFn\n            ] as FilterFn<TData>)\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : (filterFns[globalFilterFn as BuiltInFilterFn] as FilterFn<TData>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      _getFilteredRowModel:\n        table.options.getFilteredRowModel &&\n        table.options.getFilteredRowModel(table),\n      getFilteredRowModel: () => {\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  TableGenerics,\n  RowData,\n} from '../types'\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport type GroupingColumnDef<TData extends RowData, TValue> = {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TData extends RowData> = {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions = {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TData extends RowData> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : (aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ] as AggregationFn<TData>)\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport {\n  Table,\n  OnChangeFn,\n  Updater,\n  Column,\n  TableGenerics,\n  RowData,\n} from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TData extends RowData> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  RowModel,\n  Updater,\n  RowData,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions = {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TData extends RowData> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  TableGenerics,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TData extends RowData> = {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type ColumnPinningInstance<TData extends RowData> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  RowModel,\n  Updater,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TData extends RowData> = {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TData extends RowData> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows = table.getPreFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(table.getState().rowSelection ?? {}).length\n        return totalSelected > 0 && totalSelected < table.getCoreRowModel().flatRows.length\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n            d => d.getIsSelected() || d.getIsSomeSelected()\n          )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  Updater,\n  RowData,\n} from '../types'\n\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TData extends RowData> = {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport type SortingColumnDef<TData extends RowData> = {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TData extends RowData> = {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TData extends RowData> = {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\nexport type SortingInstance<TData extends RowData> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : (sortingFns[\n              column.columnDef.sortingFn as BuiltInSortingFn\n            ] as SortingFn<TData>)\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TData extends RowData> = {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TData extends RowData> = {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  ColumnDefTemplate,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TData extends RowData> = {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport type CoreInstance<TData extends RowData> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => props.header.column.id,\n          footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Row, TableGenerics, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TData extends RowData> = {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { IsAny, IsKnown } from '../utils'\n\ntype NoInfer<T> = [T][T extends any ? 0 : never]\n\ntype Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\nexport type CellContext<TData extends RowData, TValue> = {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport type CoreCell<TData extends RowData, TValue> = {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n) {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: () => ({\n      table,\n      column,\n      row,\n      cell: cell as Cell<TData, TValue>,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { createRow } from '../core/row'\nimport { TableGenerics, Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        const newRow = createRow(\n          table,\n          row.id,\n          row.original,\n          row.index,\n          row.depth\n        )\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          // Do not expand if rows are not included in pagination\n          !paginateExpandedRows ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        return expandRows(rowModel, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(\n  rowModel: RowModel<TData>,\n  table: Table<TData>\n) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { AccessorFn, ColumnDef, RowData } from './types'\nimport { DeepKeys, DeepValue } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: Omit<ColumnDef<TData, TValue>, 'accessorKey'>\n  ) => ColumnDef<TData, TValue>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]!.getValue<number>(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowModel, TableGenerics, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, TableGenerics, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, RowModel, TableGenerics, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().pagination, table.getPrePaginationRowModel()],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows(\n            {\n              rows,\n              flatRows,\n              rowsById,\n            },\n            table\n          )\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n","import { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","mouseEvents","moveHandler","onMove","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","_getFilteredRowModel","getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","_props$getValue","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","floor","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getDefaultPinningState","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","a","b","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","original","rowIndex","_valuesCache","hasOwnProperty","renderValue","renderFallbackValue","getLeafRows","_cell$getValue","acc","filterRows","filterRowImpl","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","_options$initialState","defaultOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","footer","_props$renderValue$to","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","_getAllFlatColumnsById","flatColumns","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","j","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aUndefined","bUndefined","sortInt"],"mappings":"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"}