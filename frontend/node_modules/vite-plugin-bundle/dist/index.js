var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  ENTRY_FILE_MARKER: () => ENTRY_FILE_MARKER,
  bundle: () => bundle,
  default: () => bundleHelper,
  inlineURLRevoke: () => inlineURLRevoke,
  setPluginContext: () => setPluginContext
});

// node_modules/tsup/assets/cjs_shims.js
var importMetaUrlShim = typeof document === "undefined" ? new (require("url")).URL("file:" + __filename).href : document.currentScript && document.currentScript.src || new URL("main.js", document.baseURI).href;

// src/index.ts
var import_magic_string = __toModule(require("magic-string"));
var import_rollup = __toModule(require("rollup"));
var import_path = __toModule(require("path"));
var import_crypto = __toModule(require("crypto"));
var import_fs = __toModule(require("fs"));
var { join } = import_path.posix;
function getAssetHash(content) {
  return (0, import_crypto.createHash)("sha256").update(content).digest("hex").slice(0, 8);
}
var isBuild;
var config;
var ENTRY_FILE_MARKER = "entry_file";
var plugins_config = new WeakMap();
var internal_plugin_config = new Map();
internal_plugin_config.set("vite:import-analysis", []);
var plugin = {
  name: "bundle:helper",
  configResolved(resolvedConfig) {
    if (config)
      return;
    isBuild = resolvedConfig.command === "build";
    config = resolvedConfig;
  },
  transform(code, id) {
    if (!isBuild && id.endsWith(ENTRY_FILE_MARKER)) {
      const nCode = new import_magic_string.default(code).prepend(`import '/@vite/env'
`);
      return {
        code: nCode.toString(),
        map: nCode.generateMap({ hires: false })
      };
    }
  }
};
var removeString = 'export function __vite_legacy_guard(){import("data:text/javascript,")}';
function bundleHelper() {
  return plugin;
}
var watchers = [];
async function bundle(pluginContext, entry, ctx, result_type = "module", inline = false, watch_files = false, static_file = false) {
  if (isBuild && watch_files) {
    throw new Error("At build you can not watch files!");
  }
  if (!isBuild && inline) {
    throw new Error("You only can inline files at build!");
  }
  if (inline && result_type === "module") {
    throw new Error("You only can inline files at build that are of type iife not module!");
  }
  if (entry.includes("?"))
    entry = entry + "&" + ENTRY_FILE_MARKER;
  else
    entry = entry + "?" + ENTRY_FILE_MARKER;
  if (result_type === "module") {
    if (isBuild) {
      const file = pluginContext.emitFile({
        type: "chunk",
        id: entry
      });
      return `import.meta.ROLLUP_FILE_URL_${file}`;
    } else {
      return "'/@id/" + entry + "'";
    }
  }
  if (result_type === "iife") {
    const rollup_config = {
      input: entry,
      plugins: [
        ...config.plugins.filter((v) => inContext(v, ctx)),
        {
          name: "fix-legacy-plugin-iife",
          renderChunk(code, chunk) {
            if (chunk.isEntry) {
              const [before, after] = code.split(removeString);
              let startpos = before.length;
              if (after) {
                const nCode = new import_magic_string.default(code);
                nCode.overwrite(startpos, startpos + removeString.length, "");
                return {
                  code: nCode.toString(),
                  map: nCode.generateMap({ hires: false })
                };
              }
            }
          }
        },
        {
          name: "extra-file-loader",
          load(id) {
            if (id.includes("?")) {
              return (0, import_fs.readFileSync)(id.split("?")[0], "utf-8");
            }
          }
        }
      ]
    };
    if (watch_files) {
      const cacheDir = join(config.cacheDir, ".bundle.iife");
      if (!(0, import_fs.existsSync)(cacheDir))
        (0, import_fs.mkdirSync)(cacheDir);
      const fileName = static_file ? static_file : getAssetHash(Buffer.from(entry + ctx)) + ".iife.js";
      const outFile = join(cacheDir, fileName);
      const watcher = (0, import_rollup.watch)(__spreadProps(__spreadValues({}, rollup_config), { output: { file: outFile } }));
      watchers.push(watcher);
      return new Promise((res, req) => {
        let first = true;
        watcher.on("event", async (event) => {
          if (event.code === "ERROR" && first) {
            first = false;
            req(event.error);
          }
          if (event.code === "BUNDLE_END") {
            await event.result.generate({
              format: "iife",
              sourcemap: "inline"
            });
            if (first) {
              first = false;
              pluginContext.addWatchFile(outFile);
              res(JSON.stringify(outFile.slice(config.root.length)));
            }
          }
        });
      });
    } else {
      const bundle2 = await (0, import_rollup.rollup)(rollup_config);
      try {
        const { output } = await bundle2.generate({
          format: "iife",
          sourcemap: config.build.sourcemap
        });
        await bundle2.close();
        const code = output[0].code;
        const content = Buffer.from(code);
        if (inline) {
          const base64 = content.toString("base64");
          const blob = `new Blob([atob("${base64}")], { type: 'text/javascript;charset=utf-8' })`;
          return `(window.URL || window.webkitURL).createObjectURL(${blob})`;
        }
        if (!static_file) {
          const pathSplit = entry.split("?")[0].split(/\/|\\/g);
          const fileSplit = pathSplit[pathSplit.length - 1].split(".");
          const basename = fileSplit.slice(0, fileSplit.length - 1).join(".");
          const contentHash = getAssetHash(content);
          const fileName = join(config.build.assetsDir, `${basename}.${contentHash}.js`);
          return `'__VITE_ASSET__${pluginContext.emitFile({
            fileName,
            type: "asset",
            source: code
          })}__'`;
        } else {
          return `'__VITE_ASSET__${pluginContext.emitFile({
            fileName: static_file,
            type: "asset",
            source: code
          })}__'`;
        }
      } catch (ex) {
        await bundle2.close();
        throw ex;
      }
    }
  }
  throw new Error("Non valid result_type!");
}
function setPluginContext(plugin2, ctx, overwrite = true) {
  if (overwrite || !plugins_config.has(plugin2)) {
    plugins_config.set(plugin2, ctx);
  } else {
    plugins_config.set(plugin2, plugins_config.get(plugin2).concat(ctx));
  }
}
function inContext(plugin2, ctx) {
  if (!plugins_config.has(plugin2) && !internal_plugin_config.has(plugin2.name))
    return true;
  if (plugins_config.has(plugin2)) {
    return plugins_config.get(plugin2).includes(ctx);
  }
  if (internal_plugin_config.has(plugin2.name)) {
    return internal_plugin_config.get(plugin2.name).includes(ctx) || internal_plugin_config.get(plugin2.name).includes("*");
  }
}
function inlineURLRevoke(varName) {
  return `(window.URL || window.webkitURL).revokeObjectURL(${varName});`;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ENTRY_FILE_MARKER,
  bundle,
  inlineURLRevoke,
  setPluginContext
});
