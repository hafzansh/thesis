{
  "version": 3,
  "sources": ["../../svelte-chartjs/src/Base.svelte", "../../svelte-chartjs/src/Line.svelte", "../../svelte-chartjs/src/Radar.svelte", "../../svelte-chartjs/src/Doughnut.svelte", "../../svelte-chartjs/src/Pie.svelte", "../../svelte-chartjs/src/Bar.svelte", "../../svelte-chartjs/src/Polar.svelte", "../../svelte-chartjs/src/Bubble.svelte", "../../svelte-chartjs/src/Scatter.svelte"],
  "sourcesContent": ["<script lang=\"ts\">\n  import { onMount, afterUpdate, onDestroy } from 'svelte';\n\n  import { Chart } from 'chart.js';\n\n  import type {\n    TChartType,\n    TChartData,\n    TChartOptions,\n    TChartPlugin,\n    TypedChartJS,\n  } from './types';\n\n  export let data: TChartData = {\n    labels: [],\n    datasets: [{ data: [] }],\n  };\n  export let type: TChartType = 'line';\n  export let options: TChartOptions<TChartType> = {};\n  export let plugins: TChartPlugin[] = [];\n\n  function clean(props: SvelteAllProps) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let { data, type, options, plugins, children, $$scope, $$slots, ...rest } =\n      props;\n\n    return rest;\n  }\n\n  let props = clean($$props);\n\n  let chart: TypedChartJS | null = null;\n  let chartRef: HTMLCanvasElement;\n\n  onMount(() => {\n    chart = new Chart(chartRef, {\n      type,\n      data,\n      options,\n      plugins,\n    });\n  });\n  afterUpdate(() => {\n    if (!chart) return;\n\n    chart.data = data;\n    chart.options = options;\n    chart.update();\n  });\n\n  onDestroy(() => {\n    if (chart) chart.destroy();\n    chart = null;\n  });\n</script>\n\n<canvas bind:this={chartRef} {...props} />\n", "<script lang=\"ts\">\n  import { Chart, LineController } from 'chart.js';\n  import type { DefaultDataPoint } from 'chart.js';\n\n  import Base from './Base.svelte';\n  import type { TChartData, TChartOptions, TChartPlugin } from './types';\n\n  interface $$Props {\n    data: TChartData<'line', DefaultDataPoint<'line'>, unknown>;\n    options?: TChartOptions<'line'>;\n    plugins?: TChartPlugin<'line'>[];\n  }\n\n  Chart.register(LineController);\n</script>\n\n<Base {...$$props} type=\"line\" />\n", "<script lang=\"ts\">\n  import { Chart, RadarController } from 'chart.js';\n  import type { DefaultDataPoint } from 'chart.js';\n\n  import Base from './Base.svelte';\n  import type { TChartData, TChartOptions, TChartPlugin } from './types';\n\n  interface $$Props {\n    data: TChartData<'radar', DefaultDataPoint<'radar'>, unknown>;\n    options?: TChartOptions<'radar'>;\n    plugins?: TChartPlugin<'radar'>[];\n  }\n\n  Chart.register(RadarController);\n</script>\n\n<Base {...$$props} type=\"radar\" />\n", "<script lang=\"ts\">\n  import { Chart, DoughnutController } from 'chart.js';\n\n  import Base from './Base.svelte';\n  import type { TChartData, TChartOptions, TChartPlugin } from './types';\n\n  interface $$Props {\n    data: TChartData<'doughnut', number[], unknown>;\n    options?: TChartOptions<'doughnut'>;\n    plugins?: TChartPlugin<'doughnut'>[];\n  }\n\n  Chart.register(DoughnutController);\n</script>\n\n<Base {...$$props} type=\"doughnut\" />\n", "<script lang=\"ts\">\n  import { Chart, PieController } from 'chart.js';\n\n  import Base from './Base.svelte';\n  import type { TChartData, TChartOptions, TChartPlugin } from './types';\n\n  interface $$Props {\n    data: TChartData<'pie', number[], unknown>;\n    options?: TChartOptions<'pie'>;\n    plugins?: TChartPlugin<'pie'>[];\n  }\n\n  Chart.register(PieController);\n</script>\n\n<Base {...$$props} type=\"pie\" />\n", "<script lang=\"ts\">\n  import { Chart, BarController } from 'chart.js';\n\n  import Base from './Base.svelte';\n  import type { TChartData, TChartOptions, TChartPlugin } from './types';\n\n  interface $$Props {\n    data: TChartData<'bar', number[], unknown>;\n    options?: TChartOptions<'bar'>;\n    plugins?: TChartPlugin<'bar'>[];\n  }\n\n  Chart.register(BarController);\n</script>\n\n<Base {...$$props} type=\"bar\" />\n", "<script lang=\"ts\">\n  import { Chart, PolarAreaController } from 'chart.js';\n\n  import Base from './Base.svelte';\n  import type { TChartData, TChartOptions, TChartPlugin } from './types';\n\n  interface $$Props {\n    data: TChartData<'polarArea', number[], unknown>;\n    options?: TChartOptions<'polarArea'>;\n    plugins?: TChartPlugin<'polarArea'>[];\n  }\n\n  Chart.register(PolarAreaController);\n</script>\n\n<Base {...$$props} type=\"polarArea\" />\n", "<script lang=\"ts\">\n  import { Chart, BubbleController } from 'chart.js';\n  import type { BubbleDataPoint } from 'chart.js';\n\n  import Base from './Base.svelte';\n  import type { TChartData, TChartOptions, TChartPlugin } from './types';\n\n  interface $$Props {\n    data: TChartData<'bubble', BubbleDataPoint[], unknown>;\n    options?: TChartOptions<'bubble'>;\n    plugins?: TChartPlugin<'bubble'>[];\n  }\n\n  Chart.register(BubbleController);\n</script>\n\n<Base {...$$props} type=\"bubble\" />\n", "<script lang=\"ts\">\n  import { Chart, ScatterController } from 'chart.js';\n  import type { DefaultDataPoint } from 'chart.js';\n\n  import Base from './Base.svelte';\n  import type { TChartData, TChartOptions, TChartPlugin } from './types';\n\n  interface $$Props {\n    data: TChartData<'scatter', DefaultDataPoint<'scatter'>, unknown>;\n    options?: TChartOptions<'scatter'>;\n    plugins?: TChartPlugin<'scatter'>[];\n  }\n\n  Chart.register(ScatterController);\n</script>\n\n<Base {...$$props} type=\"scatter\" />\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwDiC,IAAK;;;;;;;;;;;;AAAtC,aAAyC,QAAA,QAAA,MAAA;;;;;QAAR,KAAK;MAAA,CAAA,CAAA;;;;;;;;;;;AAnC3B,eAAM,OAAqB;AAE5B,MAAA,EAAA,MAAM,MAAM,SAAS,SAAS,UAAU,SAAS,YAAY,SACjE;SAEK;;;AAbE,MAAA,EAAA,OACT;IAAA,QACA,CAAA;IAAA,UAAQ;;QAAK,MAAI,CAAA;MAAA;IAAA;QAAA;AAER,MAAA,EAAA,OAAmB,WAAM;QACzB,UAAO,CAAA,MAAA;QACP,UAAO,CAAA,MAAA;MAUd,QAAQ,MAAM,OAAO;AAErB,MAAA,QAA6B;MAC7B;AAEJ,UAAO,MAAA;AACL,YAAK,IAAO,MAAM,UAAQ;MACxB;MACA;MACA;MACA;IAAO,CAAA;;AAGX,cAAW,MAAA;SACJ;AAAK;AAEV,UAAM,OAAO;AACb,UAAM,UAAU;AAChB,UAAM,OAAM;;AAGd,YAAS,MAAA;QACH;AAAO,YAAM,QAAO;AACxB,YAAQ;;;;AAIO,iBAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICxCjB,IAAO;IAAA;MAAA,MAAA;IAAA;;;;;;;;;;;;;;;;;;;;0BAAP,KAAO,EAAA;QAAA,mBAAA;OAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;;AAHf,QAAM,SAAS,cAAc;;;;;;;;;;;;;;;;;;;ICGrB,IAAO;IAAA;MAAA,MAAA;IAAA;;;;;;;;;;;;;;;;;;;;0BAAP,KAAO,EAAA;QAAA,mBAAA;OAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;;AAHf,QAAM,SAAS,eAAe;;;;;;;;;;;;;;;;;;;ICEtB,IAAO;IAAA;MAAA,MAAA;IAAA;;;;;;;;;;;;;;;;;;;;0BAAP,KAAO,EAAA;QAAA,mBAAA;OAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;;AAHf,QAAM,SAAS,kBAAkB;;;;;;;;;;;;;;;;;;;ICGzB,IAAO;IAAA;MAAA,MAAA;IAAA;;;;;;;;;;;;;;;;;;;;0BAAP,KAAO,EAAA;QAAA,mBAAA;OAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;;AAHf,QAAM,SAAS,aAAa;;;;;;;;;;;;;;;;;;;ICGpB,IAAO;IAAA;MAAA,MAAA;IAAA;;;;;;;;;;;;;;;;;;;;0BAAP,KAAO,EAAA;QAAA,mBAAA;OAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;;AAHf,QAAM,SAAS,aAAa;;;;;;;;;;;;;;;;;;;ICGpB,IAAO;IAAA;MAAA,MAAA;IAAA;;;;;;;;;;;;;;;;;;;;0BAAP,KAAO,EAAA;QAAA,mBAAA;OAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;;AAHf,QAAM,SAAS,mBAAmB;;;;;;;;;;;;;;;;;;;ICI1B,IAAO;IAAA;MAAA,MAAA;IAAA;;;;;;;;;;;;;;;;;;;;0BAAP,KAAO,EAAA;QAAA,mBAAA;OAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;;AAHf,QAAM,SAAS,gBAAgB;;;;;;;;;;;;;;;;;;;ICGvB,IAAO;IAAA;MAAA,MAAA;IAAA;;;;;;;;;;;;;;;;;;;;0BAAP,KAAO,EAAA;QAAA,mBAAA;OAAA,IAAA,CAAA;;;;;;;;;;;;;;;;;;;AAHf,QAAM,SAAS,iBAAiB;;;;;;;;;;;;;;;",
  "names": []
}
